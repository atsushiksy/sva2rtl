/******************************************************/
/* Auto-generated by parse_yacc.pl                    */
/*   DO NOT EDIT DIRECTLY!                            */
/******************************************************/
%{ 
/*************************************************************************** 
 * 
 *  Verilog Parser (prep-file for btyacc) 
 * 
 *  Author: Atsushi Kasuya 
 * 
 * 
 *   Copyright (C) 2011 Atsushi Kasuya 
 * 
 *  Coding note: 
 *    This source is parsed by several perl script along with other .data  
 *      files to conform the compiler code 
 *     
 *    #INCLUDE is handled by gen_parser.pl. But this must be a non-nested file 

 *      directory, and eventually used in spec/language.spec 
 *    This file is parsed by parse_yacc.pl and the following files are 
 *      created: 
 *        SystemVerilog.y.prep   :  anotated version of this file 
 *                                  used to create final .y (yacc input) 
 *        SV_token_table.h : Token definition file in part of .y file 
 *                             included in this file 
 *        SystemVerilog_keyword_table.h : Keyword data table used by lex 
 *        SystemVerilog_opertor_lex.h : Lex match code included in .l.pp  
 *     
 * 
 * 
 * 
 *************************************************************************/ 
 
#include <stdio.h> 
#include <stdlib.h> 
#include <string.h> 
 
#include "systemverilog_node.h" 
#include "symtab.h" 
 
/* external, internal variable declarations here */ 
extern int error_flag ; 
extern int debug_line_num ; 
extern char *input_file_name ; 
 
extern int compile_pass ; 
extern int ise_flag ; 
 
extern systemverilog_node *root_node ; 
 
int parsing_assertion = 0 ; 
 
%} 
 
%union { 
  systemverilog_node *sv_node ; 
} 
 
%token <sv_node> Identifier  
%token <sv_node> Property_Name 
%token <sv_node> Sys_identifier   /* $something */ 
%token <sv_node> Real_number     /* real */ 
%token <sv_node> Decimal_number   /* number */ 
%token <sv_node> Hex_number       /* verilog format hex */ 
%token <sv_node> Octal_number     /* verilog format octal */ 
%token <sv_node> Binary_number    /* verilog format binary */ 
%token <sv_node> Unbased_unsized_literal   /*  '0 '1 '[xzXZ] */ 
%token <sv_node> Unsigned_number   /* unsigned decimal*/ 
%token <sv_node> String_literal   /* string */ 
 
%token <sv_node> SV_primitive
%token <sv_node> SV_trireg
%token <sv_node> SV_if
%token <sv_node> SV_unsigned
%token <sv_node> SV_endtable
%token <sv_node> SV_expect
%token <sv_node> SV_always
%token <sv_node> SV_uwire
%token <sv_node> SV_bool
%token <sv_node> SV_inout
%token <sv_node> SV_specparam
%token <sv_node> SV_inf
%token <sv_node> SV_wone
%token <sv_node> SV_pullup
%token <sv_node> SV_rpmos
%token <sv_node> SV_trior
%token <sv_node> SV_endproperty
%token <sv_node> SV_assign
%token <sv_node> SV_ps
%token <sv_node> SV_and
%token <sv_node> SV_small
%token <sv_node> SV_time
%token <sv_node> SV_pull0
%token <sv_node> SV_cover
%token <sv_node> SV_Q
%token <sv_node> SV_ms
%token <sv_node> SV_M
%token <sv_node> SV_shortreal
%token <sv_node> SV_endfunction
%token <sv_node> SV_within
%token <sv_node> SV_longint
%token <sv_node> SV_xor
%token <sv_node> SV_wait
%token <sv_node> SV_automatic
%token <sv_node> SV_throughout
%token <sv_node> SV_nand
%token <sv_node> SV_rnmos
%token <sv_node> SV_join_none
%token <sv_node> SV_iff
%token <sv_node> SV_assume
%token <sv_node> SV_assert
%token <sv_node> SV_bufif1
%token <sv_node> SV_bit
%token <sv_node> SV_N
%token <sv_node> SV_join_any
%token <sv_node> SV_weak1
%token <sv_node> SV_rtran
%token <sv_node> SV_wand
%token <sv_node> SV_casex
%token <sv_node> SV_weak0
%token <sv_node> SV_tranif0
%token <sv_node> SV_highz1
%token <sv_node> SV_s
%token <sv_node> SV_endsequence
%token <sv_node> SV_B
%token <sv_node> SV_posedge
%token <sv_node> SV_cmos
%token <sv_node> SV_noshowcancelled
%token <sv_node> SV_F
%token <sv_node> SV_supply1
%token <sv_node> SV_tran
%token <sv_node> SV_rtranif1
%token <sv_node> SV_0
%token <sv_node> SV_us
%token <sv_node> SV_endtask
%token <sv_node> SV_casez
%token <sv_node> SV_task
%token <sv_node> SV_signed
%token <sv_node> SV_while
%token <sv_node> SV_fork
%token <sv_node> SV_R
%token <sv_node> SV_deassign
%token <sv_node> SV_sequence
%token <sv_node> SV_input
%token <sv_node> SV_table
%token <sv_node> SV_not
%token <sv_node> SV_string
%token <sv_node> SV_triand
%token <sv_node> SV_pulsestyle_onevent
%token <sv_node> SV_property
%token <sv_node> SV_tri1
%token <sv_node> SV_output
%token <sv_node> SV_strong0
%token <sv_node> SV_join
%token <sv_node> SV_byte
%token <sv_node> SV_b
%token <sv_node> SV_q
%token <sv_node> SV_nmos
%token <sv_node> SV_repeat
%token <sv_node> SV_defparam
%token <sv_node> SV_notif0
%token <sv_node> SV_logic
%token <sv_node> SV_ifnone
%token <sv_node> SV_int
%token <sv_node> SV_function
%token <sv_node> SV_highz0
%token <sv_node> SV_tri
%token <sv_node> SV_pulldown
%token <sv_node> SV_case
%token <sv_node> SV_xnor
%token <sv_node> SV_from
%token <sv_node> SV_medium
%token <sv_node> SV_real
%token <sv_node> SV_rtranif0
%token <sv_node> SV_module
%token <sv_node> SV_disable
%token <sv_node> SV_P
%token <sv_node> SV_release
%token <sv_node> SV__
%token <sv_node> SV_wire
%token <sv_node> SV_pull1
%token <sv_node> SV_large
%token <sv_node> SV_reg
%token <sv_node> SV_exclude
%token <sv_node> SV_first_match
%token <sv_node> SV_tri0
%token <sv_node> SV_step
%token <sv_node> SV_1
%token <sv_node> SV_rcmos
%token <sv_node> SV_or
%token <sv_node> SV_integer
%token <sv_node> SV_fs
%token <sv_node> SV_bufif0
%token <sv_node> SV_strong1
%token <sv_node> SV_for
%token <sv_node> SV_default
%token <sv_node> SV_else
%token <sv_node> SV_event
%token <sv_node> SV_suppuy0
%token <sv_node> SV_tranif1
%token <sv_node> SV_pmos
%token <sv_node> SV_end
%token <sv_node> SV_parameter
%token <sv_node> SV_forever
%token <sv_node> SV_realtime
%token <sv_node> SV_supply0
%token <sv_node> SV_r
%token <sv_node> SV_x
%token <sv_node> SV_endcase
%token <sv_node> SV_endmodule
%token <sv_node> SV_h
%token <sv_node> SV_intersect
%token <sv_node> SV_pulsestyle_ondetect
%token <sv_node> SV_endprimitive
%token <sv_node> SV_begin
%token <sv_node> SV_f
%token <sv_node> SV_n
%token <sv_node> SV_negedge
%token <sv_node> SV_buf
%token <sv_node> SV_localparam
%token <sv_node> SV_shortint
%token <sv_node> SV_wor
%token <sv_node> SV_force
%token <sv_node> SV_ns
%token <sv_node> SV_showcancelled
%token <sv_node> SV_l
%token <sv_node> SV_notif1
%token <sv_node> SV_p
%token <sv_node> SV_initial
%token <sv_node> ULSHIFT_EQ
%token <sv_node> DBL_CLN
%token <sv_node> D_PLUS
%token <sv_node> AND_EQ
%token <sv_node> LSHIFT
%token <sv_node> Q_NEQ
%token <sv_node> URSHIFT_EQ
%token <sv_node> OR_EQ
%token <sv_node> C_DIV
%token <sv_node> GE
%token <sv_node> EQEQ
%token <sv_node> MNS_CLN
%token <sv_node> EORTILDA
%token <sv_node> LE
%token <sv_node> LOR
%token <sv_node> TRPL_AND
%token <sv_node> NEQEQ
%token <sv_node> LSHIFT_EQ
%token <sv_node> SLSH_EQ
%token <sv_node> DOUBLE_STAR
%token <sv_node> PLS_CLN
%token <sv_node> ARROW
%token <sv_node> C_EQ
%token <sv_node> TILDAAND
%token <sv_node> RSHIFT_EQ
%token <sv_node> Q_EQ
%token <sv_node> PLUS_EQ
%token <sv_node> STAR_RPAR
%token <sv_node> D_MINUS
%token <sv_node> STAR_GT
%token <sv_node> BAR_ARROW
%token <sv_node> DBL_SHARP
%token <sv_node> STAR_EQ
%token <sv_node> BAR_FATARROW
%token <sv_node> NE
%token <sv_node> EQEQEQ
%token <sv_node> MINUS_EQ
%token <sv_node> LTLTLT
%token <sv_node> TILDAEOR
%token <sv_node> TILDAOR
%token <sv_node> MOD_EQ
%token <sv_node> LAND
%token <sv_node> RSHIFT
%token <sv_node> EQ_GT
%token <sv_node> URSHIFT
%token <sv_node> EOR_EQ
%token <sv_node> LPAR_STAR
%token <sv_node> '$'
%token <sv_node> '/'
%token <sv_node> ':'
%token <sv_node> '='
%token <sv_node> '*'
%token <sv_node> ','
%token <sv_node> '~'
%token <sv_node> '-'
%token <sv_node> '.'
%token <sv_node> '['
%token <sv_node> '@'
%token <sv_node> '<'
%token <sv_node> ';'
%token <sv_node> '!'
%token <sv_node> '|'
%token <sv_node> '{'
%token <sv_node> ']'
%token <sv_node> '%'
%token <sv_node> '#'
%token <sv_node> '>'
%token <sv_node> '+'
%token <sv_node> '?'
%token <sv_node> '^'
%token <sv_node> ')'
%token <sv_node> '&'
%token <sv_node> '('
%token <sv_node> '}'
%type <sv_node> case_item 
%type <sv_node> package_scope 
%type <sv_node> branch_probe_expression 
%type <sv_node> module_item_list_opt 
%type <sv_node> defparam_assign_list 
%type <sv_node> dimensions 
%type <sv_node> packed_dimensions 
%type <sv_node> integral_number 
%type <sv_node> sized_or_unsized_dimension 
%type <sv_node> list_of_variable_identifiers 
%type <sv_node> dr_strength0 
%type <sv_node> statement 
%type <sv_node> unary_operator 
%type <sv_node> list_of_ports 
%type <sv_node> a_variable_identifier 
%type <sv_node> property_declaration 
%type <sv_node> sequence_method_call 
%type <sv_node> localparam_assign_decl 
%type <sv_node> udp_comb_entry_list 
%type <sv_node> net_type 
%type <sv_node> time_literal 
%type <sv_node> assignment_operator 
%type <sv_node> non_integer_type 
%type <sv_node> specparam 
%type <sv_node> expr_primary 
%type <sv_node> actual_arg_list 
%type <sv_node> specify_item 
%type <sv_node> localparam_assign 
%type <sv_node> defparam_assign 
%type <sv_node> sequence_expr 
%type <sv_node> parameter_value_ranges 
%type <sv_node> inc_or_dec_operator 
%type <sv_node> primitive_type 
%type <sv_node> list_of_identifiers 
%type <sv_node> spec_notifier_opt 
%type <sv_node> parameter_assign 
%type <sv_node> opt_cycle_delay_range 
%type <sv_node> net_variable 
%type <sv_node> sized_or_unsized_dimensions 
%type <sv_node> generate_block 
%type <sv_node> constant_primary 
%type <sv_node> udp_primitive 
%type <sv_node> port_reference 
%type <sv_node> edge_operator 
%type <sv_node> task_port_decl_list 
%type <sv_node> module_item 
%type <sv_node> cont_assign_list 
%type <sv_node> assume_property_statement 
%type <sv_node> sequence_item 
%type <sv_node> drive_strength 
%type <sv_node> gatetype 
%type <sv_node> source_file 
%type <sv_node> assert_property_statement 
%type <sv_node> module_parameter_port_list_opt 
%type <sv_node> attribute_instance_list 
%type <sv_node> value_range_expression 
%type <sv_node> list_of_formals 
%type <sv_node> verilog_src 
%type <sv_node> primary_literal 
%type <sv_node> sequence_declaration 
%type <sv_node> udp_input_list 
%type <sv_node> module_port_list_opt 
%type <sv_node> module_start 
%type <sv_node> list_of_ports_opt 
%type <sv_node> reg_opt 
%type <sv_node> hierarchy_identifier 
%type <sv_node> unsized_dimension 
%type <sv_node> parameter_value_opt 
%type <sv_node> binary_operator 
%type <sv_node> udp_comb_entry 
%type <sv_node> non_consecutive_repetition 
%type <sv_node> udp_body 
%type <sv_node> delay_value_simple 
%type <sv_node> dimensions_opt 
%type <sv_node> delay1 
%type <sv_node> gate_instance_list 
%type <sv_node> actual_arg_expr 
%type <sv_node> opt_list_of_formals 
%type <sv_node> spec_reference_event 
%type <sv_node> block_item_decls 
%type <sv_node> expr_mintypmax 
%type <sv_node> cycle_delay_range_sequence_expr 
%type <sv_node> charge_strength_opt 
%type <sv_node> udp_sequ_entry_list 
%type <sv_node> event_expression 
%type <sv_node> specify_item_list 
%type <sv_node> task_port_decl 
%type <sv_node> opt_coma_sequence_match_items 
%type <sv_node> specify_path_identifiers 
%type <sv_node> sequence_abbrev 
%type <sv_node> case_items 
%type <sv_node> module_item_list 
%type <sv_node> integer_vector_type 
%type <sv_node> udp_initial 
%type <sv_node> dist_item 
%type <sv_node> udp_sequ_entry 
%type <sv_node> opt_clocking_event 
%type <sv_node> task_port_item 
%type <sv_node> lpvalue 
%type <sv_node> port_identifire 
%type <sv_node> port_declaration 
%type <sv_node> concurrent_assertion_item_declaration 
%type <sv_node> gate_instance 
%type <sv_node> real_or_realtime 
%type <sv_node> charge_strength 
%type <sv_node> block_item_decls_opt 
%type <sv_node> udp_input_sym 
%type <sv_node> expression_list_with_nuls 
%type <sv_node> constant_expression 
%type <sv_node> dist_list 
%type <sv_node> opt_more_sequence_item 
%type <sv_node> task_item 
%type <sv_node> udp_entry_list 
%type <sv_node> real_variable 
%type <sv_node> opt_dist_weight 
%type <sv_node> sequence_instance 
%type <sv_node> opt_else_statement 
%type <sv_node> register_variable_list 
%type <sv_node> assertion_variable_declaration 
%type <sv_node> switchtype 
%type <sv_node> spec_polarity 
%type <sv_node> opt_pars_list_of_formals 
%type <sv_node> udp_input_declaration_list 
%type <sv_node> udp_port_list 
%type <sv_node> parameter_value_byname 
%type <sv_node> specify_simple_path 
%type <sv_node> udp_reg_opt 
%type <sv_node> parameter_value_byname_list 
%type <sv_node> concurrent_assertion_statement 
%type <sv_node> function_item_list 
%type <sv_node> formal_arg 
%type <sv_node> net_variable_list 
%type <sv_node> attribute 
%type <sv_node> delay_value_list 
%type <sv_node> data_type 
%type <sv_node> localparam_assign_list 
%type <sv_node> const_or_range_expression 
%type <sv_node> edge_identifier 
%type <sv_node> port_type 
%type <sv_node> module_attribute_foreign 
%type <sv_node> cont_assign 
%type <sv_node> opt_statement 
%type <sv_node> register_variable 
%type <sv_node> constant_range 
%type <sv_node> opt_actual_arg_list 
%type <sv_node> description 
%type <sv_node> specparam_list 
%type <sv_node> module_parameter_port_list 
%type <sv_node> primitive_type_opt 
%type <sv_node> event_expression_list 
%type <sv_node> variable_dimension 
%type <sv_node> udp_initial_expr_opt 
%type <sv_node> delay_value 
%type <sv_node> port_name_list 
%type <sv_node> consecutive_repetition 
%type <sv_node> delay3_opt 
%type <sv_node> number 
%type <sv_node> integer_type 
%type <sv_node> range 
%type <sv_node> udp_port_decl 
%type <sv_node> clocking_event 
%type <sv_node> event_control 
%type <sv_node> opt_pars_actual_arg_list 
%type <sv_node> parameter_value_ranges_opt 
%type <sv_node> task_item_list 
%type <sv_node> module 
%type <sv_node> opt_packed_dimension 
%type <sv_node> spec_notifier 
%type <sv_node> opt_disable_iff_block 
%type <sv_node> port_name 
%type <sv_node> ps_identifier 
%type <sv_node> delay3 
%type <sv_node> expect_property_statement 
%type <sv_node> generate_case_item 
%type <sv_node> generate_block_opt 
%type <sv_node> expression_or_dist 
%type <sv_node> cycle_delay_const_range_expression 
%type <sv_node> udp_output_sym 
%type <sv_node> specify_simple_path_decl 
%type <sv_node> net_type_opt 
%type <sv_node> property_expr 
%type <sv_node> opt_packed_dimensions 
%type <sv_node> dr_strength1 
%type <sv_node> more_sequence_item 
%type <sv_node> list_of_port_declarations 
%type <sv_node> expression_list_proper 
%type <sv_node> statement_list 
%type <sv_node> opt_sequence_abbrev 
%type <sv_node> parameter_assign_decl 
%type <sv_node> operator_assignment 
%type <sv_node> opt_package_scope 
%type <sv_node> assertion_variable_declarations 
%type <sv_node> opt_signing 
%type <sv_node> list_of_port_identifiers 
%type <sv_node> boolean_abbrev 
%type <sv_node> goto_repetition 
%type <sv_node> join_keyword 
%type <sv_node> parameter_value_range 
%type <sv_node> function_item 
%type <sv_node> expression 
%type <sv_node> concurrent_assertion_item 
%type <sv_node> opt_assign_actual_arg_expr 
%type <sv_node> opt_edge_identifier 
%type <sv_node> sequence_expr_item 
%type <sv_node> attribute_list_opt 
%type <sv_node> packed_dimension 
%type <sv_node> signed_opt 
%type <sv_node> from_exclude 
%type <sv_node> function_range_or_type_opt 
%type <sv_node> specify_edge_path_decl 
%type <sv_node> automatic_opt 
%type <sv_node> action_block 
%type <sv_node> port 
%type <sv_node> task_item_list_opt 
%type <sv_node> cover_property_statement 
%type <sv_node> real_variable_list 
%type <sv_node> inc_or_dec_expression 
%type <sv_node> sequence_match_item 
%type <sv_node> range_opt 
%type <sv_node> formal_arg_list 
%type <sv_node> integer_atom_type 
%type <sv_node> coma_sequence_match_items 
%type <sv_node> time_unit 
%type <sv_node> opt_else_property_expr 
%type <sv_node> attribute_list 
%type <sv_node> net_decl_assigns 
%type <sv_node> opt_end_identifier 
%type <sv_node> udp_port_decls 
%type <sv_node> opt_iff_expression 
%type <sv_node> specify_edge_path 
%type <sv_node> opt_dist_list 
%type <sv_node> parameter_assign_list 
%type <sv_node> cycle_delay_range 
%type <sv_node> generate_case_items 
%type <sv_node> cycle_delay_range_sequence_item 
%type <sv_node> generate_if 
%type <sv_node> value_range 
%type <sv_node> udp_init_opt 
%type <sv_node> var_type 
%type <sv_node> signing 
%type <sv_node> unpacked_dimension 
%type <sv_node> opt_assertion_variable_declarations 
%type <sv_node> drive_strength_opt 
%type <sv_node> formal_list_item 
%type <sv_node> opt_block_id 
%type <sv_node> net_decl_assign 
%type <sv_node> polarity_operator 
%type <sv_node> opt_boolean_abbrev 
%type <sv_node> block_item_decl 
%type <sv_node> property_spec 
%type <sv_node> statement_or_null 
 
%type <sv_node> '\'' 
 

%right '=' PLUS_EQ MINUS_EQ STAR_EQ SLSH_EQ MOD_EQ AND_EQ EOR_EQ OR_EQ LSHIFT_EQ RSHIFT_EQ ULSHIFT_EQ URSHIFT_EQ C_EQ C_DIV 
%right ARROW 
%right '?' ':' 
%left LOR 
%left LAND 
%left '|' 
%left '^' TILDAEOR EORTILDA 
%left '&' 
%left EQEQ NE EQEQEQ NEQEQ Q_EQ Q_NEQ 
%left LE '>' '<' GE 'inside'  
%left '+' '-' 
%left '*' '/' '%' 
%left DOUBLE_STAR 
/* unary (+ - etc. are not declared here) */ 
%right TILDAAND TILDAOR D_PLUS D_MINUS 
%left DBL_CLN '.' 
 

 
%start verilog_src 
 
%% 
 
 
verilog_src:  
  {
    SKIP_ON_ERROR ;
    PASS2 {
      root_node = NULL ;
    }
    $$ = NULL ;
  }
  | 
  source_file 
  {
    /* set_root */
    SKIP_ON_ERROR ;
    PASS2 {
      root_node = $1 ;
    }
    $$ = $1 ;
  }
  ; 
 
source_file: 
  description 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  source_file description 
  {
    SKIP_ON_ERROR ;
    PASS2 {
      systemverilog_node *d1, *d2 ;
      d1 = $1 ;
      d2 = $2 ;  
      if(d1) {
        while(d1->next) d1 = d1->next ;
        d1->next = d2 ;
      }
    }
    $$ = $1 ;
  }
  ; 
 
 
number: 
  integral_number 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  Real_number 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
integral_number: 
  Unsigned_number 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_integral_number ;
    }
  }
  | 
  Decimal_number 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_integral_number ;
    }
  }
  | 
  Octal_number 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_integral_number ;
    }
  }
  | 
  Binary_number 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_integral_number ;
    }
  }
  | 
  Hex_number 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_integral_number ;
    }
  }
  ; 
 
real_or_realtime: 
  SV_real 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_realtime 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
attribute_list_opt: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  attribute_instance_list 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
attribute_instance_list: 
  LPAR_STAR STAR_RPAR  
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  LPAR_STAR attribute_list STAR_RPAR  
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  attribute_instance_list LPAR_STAR STAR_RPAR  
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  attribute_instance_list LPAR_STAR attribute_list STAR_RPAR 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  ; 
 
attribute_list: 
  attribute_list ',' attribute 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  attribute 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
 
attribute: 
  Identifier 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  Identifier '=' expression 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
 
block_item_decl: 
  attribute_list_opt SV_reg 
    primitive_type_opt signed_opt range 
    register_variable_list ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 7 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
      $$->node[6] = $7 ;
      if( $7 ) $7->parent = $$ ;
    }
  }
  | 
  attribute_list_opt SV_reg 
    primitive_type_opt signed_opt 
    register_variable_list ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
  | 
  attribute_list_opt SV_integer register_variable_list ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  | 
  attribute_list_opt SV_time register_variable_list ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  | 
  attribute_list_opt SV_real real_variable_list ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  | 
  attribute_list_opt SV_realtime real_variable_list ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  | 
  SV_event list_of_identifiers ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  SV_parameter parameter_assign_decl ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  SV_localparam localparam_assign_decl ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
 
block_item_decls: 
  block_item_decl 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  block_item_decls block_item_decl 
  {
    SKIP_ON_ERROR ;
    PASS2 {
      systemverilog_node *d1, *d2 ;
      d1 = $1 ;
      d2 = $2 ;  
      if(d1) {
        while(d1->next) d1 = d1->next ;
        d1->next = d2 ;
      }
    }
    $$ = $1 ;
  }
  ; 
 
block_item_decls_opt: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  block_item_decls 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
case_item: 
  expression_list_proper ':' statement_or_null 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  SV_default ':' statement_or_null 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  SV_default  statement_or_null 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  ; 
 
case_items: 
  case_items case_item 
  {
    SKIP_ON_ERROR ;
    PASS2 {
      systemverilog_node *d1, *d2 ;
      d1 = $1 ;
      d2 = $2 ;  
      if(d1) {
        while(d1->next) d1 = d1->next ;
        d1->next = d2 ;
      }
    }
    $$ = $1 ;
  }
  | 
  case_item 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
charge_strength: 
  '(' SV_small ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  '(' SV_medium ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  '(' SV_large ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
 
charge_strength_opt: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  charge_strength 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
defparam_assign: 
  hierarchy_identifier '=' expression 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
 
defparam_assign_list: 
  defparam_assign 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  range defparam_assign 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  defparam_assign_list ',' defparam_assign 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
 
delay1: 
  '#' delay_value_simple 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  '#' '(' delay_value ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  ; 
 
delay3: 
  '#' delay_value_simple 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  '#' '(' delay_value ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  | 
  '#' '(' delay_value ',' delay_value ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
  | 
  '#' '(' delay_value ',' delay_value ',' delay_value ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 8 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
      $$->node[6] = $7 ;
      if( $7 ) $7->parent = $$ ;
      $$->node[7] = $8 ;
      if( $8 ) $8->parent = $$ ;
    }
  }
  ; 
 
delay3_opt: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  delay3 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
delay_value_list: 
  delay_value 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  delay_value_list ',' delay_value 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
 
delay_value: 
  expression 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  expression ':' expression ':' expression 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  ; 
 
delay_value_simple: 
  Unsigned_number 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  Decimal_number   
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  /* 
  REALTIME 
  | 
  */ 
  Identifier 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
description: 
  module 
  /* 
  | 
  udp_primitive 
  | 
  config_declaration 
  | 
  nature_declaration 
  | 
  discipline_declaration 
  ; 
  */ 
 
drive_strength: 
  '(' dr_strength0 ',' dr_strength1 ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  | 
  '(' dr_strength1 ',' dr_strength0 ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  | 
  '(' dr_strength0 ',' SV_highz1 ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  | 
  '(' dr_strength1 ',' SV_highz0 ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  | 
  '(' SV_highz1 ',' dr_strength0 ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  | 
  '(' SV_highz0 ',' dr_strength1 ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  ; 
 
drive_strength_opt: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  drive_strength 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
dr_strength0: 
  SV_suppuy0  
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_strong0  
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_pull0    
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_weak0    
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
dr_strength1: 
  SV_supply1  
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_strong1 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_pull1 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_weak1 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
event_control: 
  '@' hierarchy_identifier 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  '@' '(' event_expression_list ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  ; 
 
event_expression_list: 
  event_expression 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  event_expression_list SV_or event_expression 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  event_expression_list ',' event_expression 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
 
event_expression: 
  SV_posedge expression 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
    PASS2 {
      $$->sva_type = SV_posedge_event ;
    }
  }
  | 
  SV_negedge expression 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
    PASS2 {
      $$->sva_type = SV_negedge_event ;
    }
  
  }
  | 
  expression 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
branch_probe_expression: 
  Identifier '(' Identifier ',' Identifier ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
  | 
  Identifier '(' Identifier ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  ; 
 
 
/* 
  '+' expr_primary  
  | 
  '-' expr_primary 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_unary_minus ;
    }
  }
  | 
  '~' expr_primary  
  | 
 '&' expr_primary  
  | 
 '!' expr_primary  
  | 
 '|' expr_primary  
  | 
  '^' expr_primary 
  | 
  '~' '&' expr_primary 
  | 
  '~' '|' expr_primary  
  | 
  '~' '^' expr_primary  
  | 
  TILDAAND expr_primary  
  | 
  TILDAOR expr_primary  
  | 
  TILDAEOR expr_primary  
  | 
  expression '^' expression 
  | 
  expression DOUBLE_STAR expression 
  | 
  expression '*' expression 
  | 
  expression '/' expression 
  | 
  expression '%' expression 
  | 
  expression '+' expression 
  | 
  expression '-' expression 
  | 
  expression '&' expression 
  | 
  expression '|' expression 
  | 
  expression TILDAAND expression 
  | 
  expression TILDAOR expression 
  | 
  expression TILDAEOR expression 
  | 
  expression '<' expression 
  | 
  expression '>' expression 
  | 
  expression LSHIFT expression 
  | 
  expression LTLTLT expression 
  | 
  expression RSHIFT expression 
  | 
  expression URSHIFT expression 
  | 
  expression EQEQ expression 
  | 
  expression EQEQEQ expression 
  | 
  expression LE expression 
  | 
  expression GE expression 
  | 
  expression NE expression 
  | 
  expression NEQEQ expression 
  | 
  expression LOR expression 
  | 
  expression LAND expression 
  | 
  */ 
 
 
expr_mintypmax: 
  expression 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  expression ':' expression ':' expression 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  ; 
 
 
expression_list_with_nuls: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  expression_list_with_nuls ',' expression 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  expression 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  expression_list_with_nuls ',' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  ; 
 
expression_list_proper: 
  expression_list_proper ',' expression 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  expression 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
expr_primary: 
  number 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  /* 
  REALTIME 
  | 
  */ 
  String_literal 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  Sys_identifier 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  hierarchy_identifier 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  hierarchy_identifier '(' expression_list_proper ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  | 
  Sys_identifier '(' expression_list_proper ')' 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
    PASS2{
     /* Sys_identifier '(' expression_list_proper ')' */
     if( !strcmp( "$rose", $1->name ) ) {
       $$->sva_type = SV_sys_function_call ; 
       $$->sysfunc = sys_rose ;
     }
     if( !strcmp( "$fell", $1->name ) ) {
       $$->sva_type = SV_sys_function_call ; 
       $$->sysfunc = sys_fell ;
     }
     if( !strcmp( "$onehot", $1->name ) ) {
       $$->sva_type = SV_sys_function_call ; 
       $$->sysfunc = sys_onehot ;
     }
     if( !strcmp( "$onehot0", $1->name ) ) {
       $$->sva_type = SV_sys_function_call ; 
       $$->sysfunc = sys_onehot0 ;
     }
     if( !strcmp( "$stable", $1->name ) ) {
       $$->sva_type = SV_sys_function_call ; 
       $$->sysfunc = sys_stable ;
     }
     if( !strcmp( "$past", $1->name ) ) {
       $$->sva_type = SV_sys_function_call ; 
       $$->sysfunc = sys_past ;
     }
     if( !strcmp( "$sampled", $1->name ) ) {
       $$->sva_type = SV_sys_function_call ; 
       $$->sysfunc = sys_sampled ;
     }
     if( !strcmp( "$countones", $1->name ) ) {
       $$->sva_type = SV_sys_function_call ; 
       $$->sysfunc = sys_countones ;
     }
     if( !strcmp( "$isunknown", $1->name ) ) {
       $$->sva_type = SV_sys_function_call ; 
       $$->sysfunc = sys_isunknown ;
     }
    
    }
  
  }
 
  /* omit embedded functions 
  | 
  'acos' '(' expression ')' 
  | 
  'acosh' '(' expression ')' 
  | 
  'asin' '(' expression ')' 
  | 
  'asinh' '(' expression ')' 
  | 
  'atan' '(' expression ')' 
  | 
  'atanh' '(' expression ')' 
  | 
  'atan2' '(' expression ',' expression ')' 
  | 
  'ceil' '(' expression ')' 
  | 
  'cos' '(' expression ')' 
  | 
  'cosh' '(' expression ')' 
  | 
  'exp' '(' expression ')' 
  | 
  'floor' '(' expression ')' 
  | 
  'hypot' '(' expression ',' expression ')' 
  | 
  'ln' '(' expression ')' 
  | 
  'log' '(' expression ')' 
  | 
  DOUBLE_STAR '(' expression ',' expression ')' 
  | 
  'sin' '(' expression ')' 
  | 
  'sinh' '(' expression ')' 
  | 
  'sqrt' '(' expression ')' 
  | 
  'tan' '(' expression ')' 
  | 
  'tanh' '(' expression ')' 
  | 
  'abs' '(' expression ')' 
  | 
  'max' '(' expression ',' expression ')' 
  | 
  'min' '(' expression ',' expression ')' 
  */ 
 
  /* Parenthesized expressions are primaries. */ 
  | 
  '(' expr_mintypmax ')' 
  /* Various kinds of concatenation expressions. */ 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  '{' expression_list_proper '}' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  '{' expression '{' expression_list_proper '}' '}' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
  ; 
 
  /* A function_item_list borrows the task_port_item run to match 
     declarations of ports. We check later to make sure there are no 
     output or inout ports actually used. */ 
function_item_list: 
  function_item 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  function_item_list function_item 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  ; 
 
function_item: 
  task_port_item 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  block_item_decl 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
 /* A gate_instance is a module instantiation or a built in part 
     type. In any case, the gate has a set of connections to ports. */ 
gate_instance: 
  Identifier '(' expression_list_with_nuls ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  | 
  Identifier range '(' expression_list_with_nuls ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  | 
  '(' expression_list_with_nuls ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  /* Degenerate modules can have no ports. */ 
  Identifier range 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  /* Modules can also take ports by port-name expressions. */ 
  Identifier '(' port_name_list ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  | 
  Identifier range '(' port_name_list ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  ; 
 
gate_instance_list: 
  gate_instance_list ',' gate_instance 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  gate_instance 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
gatetype: 
  SV_and 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_nand  
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_or 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  TILDAOR 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_xor 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_xnor 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_buf 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_bufif0 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_bufif1 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_not 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_notif0 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_notif1 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
switchtype: 
  SV_nmos 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_rnmos 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_pmos 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_rpmos 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_cmos 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_rcmos 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_tran 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_rtran 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_tranif0  
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_tranif1 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_rtranif0 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_rtranif1  
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
hierarchy_identifier: 
  Identifier 
  {
    $$ = $1 ;
    SKIP_ON_ERROR ;
    PASS2 {
      $$->nm = findname( $1->name ) ;
      $$->sva_type = SV_identifier ; 
    }
  }
  | 
  hierarchy_identifier '.' Identifier 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
    PASS2 { 
      /* we may need to support hieracy identifier mechanism */
      $3->nm = findname( $3->name ) ;
      $$->sva_type = SV_hieracy_identifier ;
    }
  }
  | 
  hierarchy_identifier '[' expression ']' 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
    PASS2 {
      if( $1->sva_type == SV_identifier ) {
        $1->nm = findname( $1->name ) ;
      }
      $$->sva_type = SV_identifier_singlesell ;
    }
  }
  | 
  hierarchy_identifier '[' expression ':' expression ']' 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
    PASS2 {
      if( $1->sva_type == SV_identifier ) {
        $1->nm = findname( $1->name ) ;
      }
      $$->sva_type = SV_identifier_rangesell ;
    }
    
  }
  /* 
  | 
  hierarchy_identifier '[' expression PLS_CLN expression ']' 
  | 
  hierarchy_identifier '[' expression MNS_CLN expression ']' 
  */ 
  ; 
 
list_of_identifiers: 
  Identifier 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  list_of_identifiers ',' Identifier 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
 
port_identifire: 
  Identifier 
  {
    $$ = $1 ;
    PASS1 {
      $$->nm = new_node( $$->name, SV_port_name, 1 ) ;
    }
    PASS2 {
      $$->nm = findname( $$->name ) ;
    }
    PASS1_2 {
      $$->sva_type = SV_port_identifire ;
    }  
  }
  | 
  Identifier '=' expression 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
    PASS1 {
      $1->nm = new_node( $1->name, SV_port_name, 1 ) ;
    }
    PASS2 {
      $1->nm = findname( $1->name ) ;
    }  
    PASS1_2 {
      $$->sva_type = SV_port_identifire_assign ;
    }   
  }
  ; 
   
list_of_port_identifiers: 
  port_identifire 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  list_of_port_identifiers ',' port_identifire 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_list_of_port_identifiers ;
    }
  }
  ; 
 
list_of_ports_opt: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  list_of_ports 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
   
list_of_ports: 
  port 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  list_of_ports ',' port 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
 
list_of_port_declarations: 
  port_declaration 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  list_of_port_declarations ',' port_declaration 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  list_of_port_declarations ',' Identifier 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  list_of_port_declarations ',' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  list_of_port_declarations ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  ; 
 
port_declaration: 
  attribute_list_opt 
    SV_input net_type_opt signed_opt range_opt Identifier 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
    PASS1 {
      $6->nm = findname( $6->name ) ;
      if( $6->nm == NULL ) $6->nm = new_node( $6->name, SV_port_name, 1 ) ;
      $6->nm->type = SV_port_name ;
    }
    PASS2 {
      $6->nm = findname( $6->name ) ;
      $6->nm->type = SV_port_name ;
      $$->sva_type = SV_input_port_dcl ;
    } 
  }
  | 
  attribute_list_opt 
    SV_inout  net_type_opt signed_opt range_opt Identifier 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
    PASS1 {
      $6->nm = findname( $6->name ) ;
      if( $6->nm == NULL ) $6->nm = new_node( $6->name, SV_port_name, 1 ) ;
      $6->nm->type = SV_port_name ;
    }
    PASS2 {
      $6->nm = findname( $6->name ) ;
      $6->nm->type = SV_port_name ;
      $$->sva_type = SV_inout_port_dcl ;
    } 
  }
  | 
  attribute_list_opt 
    SV_output net_type_opt signed_opt range_opt Identifier 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
    PASS1 {
      $6->nm = findname( $6->name ) ;
      if( $6->nm == NULL ) $6->nm = new_node( $6->name, SV_port_name, 1 ) ;
      $6->nm->type = SV_port_name ;
    }
    PASS2 {
      $6->nm = findname( $6->name ) ;
      $6->nm->type = SV_port_name ;
      $$->sva_type = SV_output_port_dcl ;
    } 
  }
  | 
  attribute_list_opt 
    SV_output var_type signed_opt range_opt Identifier 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
    PASS1 {
      $6->nm = findname( $6->name ) ;
      if( $6->nm == NULL ) $6->nm = new_node( $6->name, SV_port_name, 1 ) ;
      $6->nm->type = SV_port_name ;
    }
    PASS2 {
      $6->nm = findname( $6->name ) ;
      $6->nm->type = SV_port_name ;
      $$->sva_type = SV_output_port_dcl ;
    } 
  }
  | 
  attribute_list_opt 
    SV_output var_type signed_opt range_opt Identifier '=' expression 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 8 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
      $$->node[6] = $7 ;
      if( $7 ) $7->parent = $$ ;
      $$->node[7] = $8 ;
      if( $8 ) $8->parent = $$ ;
    }
  }
    PASS1 {
      $6->nm = findname( $6->name ) ;
      if( $6->nm == NULL ) $6->nm = new_node( $6->name, SV_port_name, 1 ) ;
      $6->nm->type = SV_port_name ;
    }
    PASS2 {
      $6->nm = findname( $6->name ) ;
      $6->nm->type = SV_port_name ;
      $$->sva_type = SV_output_port_dcl ;
    } 
  }
  ; 
 
net_type_opt: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  net_type 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
signed_opt: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  SV_signed  
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
lpvalue: 
  hierarchy_identifier 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  '{' expression_list_proper '}' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
 
  /* Continuous assignments have a list of individual assignments. */ 
 
cont_assign: 
  lpvalue '=' expression 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
 
cont_assign_list: 
  cont_assign_list ',' cont_assign 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  cont_assign 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
/*******************************************************/ 
/* module                                              */ 
/*******************************************************/ 
 
module: 
  attribute_list_opt 
    module_start 
    Identifier 
  {
    SKIP_ON_ERROR ;
    PASS1 {
      named_node *n = new_node($3->name, SV_module_name, 1) ;
      enter_scope( NULL ) ;
    }
    PASS2 {
      named_node *n = findname( $3->name ) ;
      enter_scope( NULL ) ;
    }
    $<sv_node>$ = NULL ;
  }
    module_parameter_port_list_opt 
    module_port_list_opt 
    module_attribute_foreign 
    ';' 
    module_item_list_opt 
    SV_endmodule 
  {
    SKIP_ON_ERROR ;
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 10 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
      $$->node[6] = $7 ;
      if( $7 ) $7->parent = $$ ;
      $$->node[7] = $8 ;
      if( $8 ) $8->parent = $$ ;
      $$->node[8] = $9 ;
      if( $9 ) $9->parent = $$ ;
      $$->node[9] = $10 ;
      if( $10 ) $10->parent = $$ ;
    }
  }
    PASS1_2 {
      exit_scope() ;
      $$->sva_type = SV_module_top ;
      // printf( "module %s\n", $3->name ) ;
      $8->sva_type = SV_module_item_begin ;
    }
  }
  ; 
 
module_start: 
  SV_module 
  /*  A.K. only accept module 
  | 
  'macromodule'  
  */ 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
module_attribute_foreign: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  LPAR_STAR Identifier SV_integer Identifier '=' String_literal ';' STAR_RPAR  
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 8 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
      $$->node[6] = $7 ;
      if( $7 ) $7->parent = $$ ;
      $$->node[7] = $8 ;
      if( $8 ) $8->parent = $$ ;
    }
  }
  ; 
 
module_port_list_opt: 
  /* empty */ 
  {
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->num_node = 0 ;
      $$->sva_type = SV_port_list ;
    }
  }
  | 
  '(' list_of_ports_opt ')'  
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_port_list ;
    }
  }
  | 
  '(' list_of_port_declarations ')'  
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_port_dcl_list ;
    }
  }
  ; 
  
 
module_parameter_port_list_opt: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  '#' '(' module_parameter_port_list ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  ; 
 
module_parameter_port_list: 
  SV_parameter parameter_assign 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  module_parameter_port_list ',' parameter_assign 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  module_parameter_port_list ',' SV_parameter parameter_assign 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  ; 
 
module_item: 
  attribute_list_opt  
    net_type 
    primitive_type_opt  
    signed_opt  
    range_opt 
    delay3_opt 
    net_variable_list  
    ';' 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 8 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
      $$->node[6] = $7 ;
      if( $7 ) $7->parent = $$ ;
      $$->node[7] = $8 ;
      if( $8 ) $8->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_net_declaration ;
    }
  
  }
  | 
  attribute_list_opt net_type 
    primitive_type_opt signed_opt range_opt 
    delay3_opt net_decl_assigns ';' 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 8 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
      $$->node[6] = $7 ;
      if( $7 ) $7->parent = $$ ;
      $$->node[7] = $8 ;
      if( $8 ) $8->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_net_assign_declaration ;
    }
  
  }
  | 
  attribute_list_opt net_type 
    primitive_type_opt signed_opt 
    drive_strength net_decl_assigns ';' 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 7 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
      $$->node[6] = $7 ;
      if( $7 ) $7->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_net_st_assign_declaration ;
    }
  
  }
  | 
  SV_trireg  
    charge_strength_opt  
    range_opt  
    delay3_opt  
    list_of_identifiers  
    ';' 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
    PASS1_2 {
      /* $5 is list of identifiers */
      systemverilog_node *node = $5 ;
      while( node ) {
        if( node->num_node == 0 ) {
          PASS1 {
            node->nm = findname( node->name ) ;
            if( node->nm == NULL )
              node->nm = new_node( node->name, SV_reg_name, 1 ) ;
          }
          PASS2 {
            node->nm = findname( node->name ) ;
          } 
          node = NULL ;
        }
        else {
          PASS1 {
            node->node[2]->nm = findname( node->node[2]->name ) ;
            if( node->node[2]->nm == NULL )
              node->node[2]->nm = new_node( node->node[2]->name, SV_reg_name, 1 ) ;
          }
          PASS2 {
            node->node[2]->nm = findname( node->node[2]->name ) ;
          }         
          node = node->node[0] ;    
        }
      }
      $$->sva_type = SV_trireg_dcl ;
    }
  }
  | 
  port_type  
    signed_opt  
    range_opt  
    delay3_opt  
    list_of_identifiers  
    ';' 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
    {
      /* $5 is list of identifiers */
      PASS1_2 {
        systemverilog_node *node = $5 ;
        while( node ) {
          if( node->num_node == 0 ) {
            node->nm = findname( node->name ) ;
            if( node->nm == NULL ) {
              fprintf( 
                stderr, "Error: Port name %s not found in scope\n", node->name 
              ) ;
              exit(1) ;
            }
            node = NULL ;
          }
          else {
            node->node[2]->nm = findname( node->node[2]->name ) ;
            if( node->node[2]->nm == NULL ) {
              fprintf( 
                stderr, "Error: Port name %s not found in scope\n", node->node[0]->name 
              ) ;
              exit(1) ;
            }
            node = node->node[0] ;
          }
        }
        $$->sva_type = SV_port_dcl_a ;
      }
    }
  }
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
    {
      /* $5 is list of identifiers */
      PASS1_2 {
        systemverilog_node *node = $5 ;
        while( node ) {
          if( node->num_node == 0 ) {
            node->nm = findname( node->name ) ;
            if( node->nm == NULL ) {
              fprintf( 
                stderr, "Error: Port name %s not found in scope\n", node->name 
              ) ;
              exit(1) ;
            }
            node = NULL ;
          }
          else {
            node->node[2]->nm = findname( node->node[2]->name ) ;
            if( node->node[2]->nm == NULL ) {
              fprintf( 
                stderr, "Error: Port name %s not found in scope\n", node->node[0]->name 
              ) ;
              exit(1) ;
            }
            node = node->node[0] ;
          }
        }
        $$->sva_type = SV_port_dcl_a ;
      }
    }
  }
  | 
  port_type 
    net_type 
    signed_opt  
    range_opt  
    list_of_identifiers  
    ';' 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
    {
      /* $5 is list of identifiers */
      PASS1_2 {
        systemverilog_node *node = $5 ;
        while( node ) {
          if( node->num_node == 0 ) {
            node->nm = findname( node->name ) ;
            if( node->nm == NULL ) {
              fprintf( 
                stderr, "Error: Port name %s not found in scope\n", node->name 
              ) ;
              exit(1) ;
            }
            node = NULL ;
          }
          else {
            node->node[2]->nm = findname( node->node[2]->name ) ;
            if( node->node[2]->nm == NULL ) {
              fprintf( 
                stderr, "Error: Port name %s not found in scope\n", node->node[0]->name 
              ) ;
              exit(1) ;
            }
            node = node->node[0] ;
          }
        }
        $$->sva_type = SV_port_dcl_b ;
      }
    }
  }
  | 
  SV_output 
    var_type 
    signed_opt  
    range_opt  
    list_of_port_identifiers 
    ';' 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
    {
      /* $5 is list of identifiers */
      PASS1_2 {
        systemverilog_node *node = $5 ;
        while( node ) {
          if( node->num_node == 0 ) {
            node->nm = findname( node->name ) ;
            if( node->nm == NULL ) {
              fprintf( 
                stderr, "Error: Port name %s not found in scope\n", node->name 
              ) ;
              exit(1) ;
            }
            node = NULL ;
          }
          else {
            node->node[2]->nm = findname( node->node[2]->name ) ;
            if( node->node[2]->nm == NULL ) {
              fprintf( 
                stderr, "Error: Port name %s not found in scope\n", node->node[0]->name 
              ) ;
              exit(1) ;
            }
            node = node->node[0] ;
          }
        }
        $$->sva_type = SV_port_dcl_c ;
      }
    }
  }
  | 
  SV_input  
    var_type  
    signed_opt  
    range_opt  
    list_of_identifiers  
    ';' 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
    {
      /* $5 is list of identifiers */
      PASS1_2 {
        systemverilog_node *node = $5 ;
        while( node ) {
          if( node->num_node == 0 ) {
            node->nm = findname( node->name ) ;
            if( node->nm == NULL ) {
              fprintf( 
                stderr, "Error: Port name %s not found in scope\n", node->name 
              ) ;
              exit(1) ;
            }
            node = NULL ;
          }
          else {
            node->node[2]->nm = findname( node->node[2]->name ) ;
            if( node->node[2]->nm == NULL ) {
              fprintf( 
                stderr, "Error: Port name %s not found in scope\n", node->node[0]->name 
              ) ;
              exit(1) ;
            }
            node = node->node[0] ;
          }
        }
        $$->sva_type = SV_port_dcl_d ;
      }
    }
  }
  | 
  SV_inout  
    var_type  
    signed_opt  
    range_opt  
    list_of_identifiers  
    ';' 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
    {
      /* $5 is list of identifiers */
      PASS1_2 {
        systemverilog_node *node = $5 ;
        while( node ) {
          if( node->num_node == 0 ) {
            node->nm = findname( node->name ) ;
            if( node->nm == NULL ) {
              fprintf( 
                stderr, "Error: Port name %s not found in scope\n", node->name 
              ) ;
              exit(1) ;
            }
            node = NULL ;
          }
          else {
            node->node[2]->nm = findname( node->node[2]->name ) ;
            if( node->node[2]->nm == NULL ) {
              fprintf( 
                stderr, "Error: Port name %s not found in scope\n", node->node[0]->name 
              ) ;
              exit(1) ;
            }
            node = node->node[0] ;
          }
        }
        $$->sva_type = SV_port_dcl_e ;
      }
    }
  }
  | 
  block_item_decl 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_defparam defparam_assign_list ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  attribute_list_opt gatetype gate_instance_list ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  | 
  attribute_list_opt gatetype delay3 gate_instance_list ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  | 
  attribute_list_opt gatetype drive_strength gate_instance_list ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  | 
   attribute_list_opt gatetype drive_strength delay3 gate_instance_list ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
  | 
  attribute_list_opt switchtype gate_instance_list ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  | 
  attribute_list_opt switchtype delay3 gate_instance_list ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  | 
  SV_pullup gate_instance_list ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  SV_pulldown gate_instance_list ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  SV_pullup '(' dr_strength1 ')' gate_instance_list ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
  | 
  SV_pullup '(' dr_strength1 ',' dr_strength0 ')' gate_instance_list ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 8 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
      $$->node[6] = $7 ;
      if( $7 ) $7->parent = $$ ;
      $$->node[7] = $8 ;
      if( $8 ) $8->parent = $$ ;
    }
  }
  | 
  SV_pullup '(' dr_strength0 ',' dr_strength1 ')' gate_instance_list ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 8 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
      $$->node[6] = $7 ;
      if( $7 ) $7->parent = $$ ;
      $$->node[7] = $8 ;
      if( $8 ) $8->parent = $$ ;
    }
  }
  | 
  SV_pulldown '(' dr_strength0 ')' gate_instance_list ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
  | 
  SV_pulldown '(' dr_strength1 ',' dr_strength0 ')' gate_instance_list ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 8 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
      $$->node[6] = $7 ;
      if( $7 ) $7->parent = $$ ;
      $$->node[7] = $8 ;
      if( $8 ) $8->parent = $$ ;
    }
  }
  | 
  SV_pulldown '(' dr_strength0 ',' dr_strength1 ')' gate_instance_list ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 8 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
      $$->node[6] = $7 ;
      if( $7 ) $7->parent = $$ ;
      $$->node[7] = $8 ;
      if( $8 ) $8->parent = $$ ;
    }
  }
  | 
  attribute_list_opt 
    Identifier parameter_value_opt gate_instance_list ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  | 
  SV_assign drive_strength_opt delay3_opt cont_assign_list ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  | 
  /* Always and initial items are behavioral processes. */ 
  attribute_list_opt SV_always statement 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  attribute_list_opt SV_initial statement 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  SV_task automatic_opt Identifier ';' 
    task_item_list_opt 
    statement_or_null 
    SV_endtask 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 7 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
      $$->node[6] = $7 ;
      if( $7 ) $7->parent = $$ ;
    }
  }
  | 
  SV_task automatic_opt Identifier '(' 
    task_port_decl_list ')' ';' 
    block_item_decls_opt 
    statement_or_null 
    SV_endtask 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 10 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
      $$->node[6] = $7 ;
      if( $7 ) $7->parent = $$ ;
      $$->node[7] = $8 ;
      if( $8 ) $8->parent = $$ ;
      $$->node[8] = $9 ;
      if( $9 ) $9->parent = $$ ;
      $$->node[9] = $10 ;
      if( $10 ) $10->parent = $$ ;
    }
  }
  |  
  SV_task automatic_opt Identifier '(' ')' ';' 
    block_item_decls_opt 
    statement_or_null 
    SV_endtask 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 9 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
      $$->node[6] = $7 ;
      if( $7 ) $7->parent = $$ ;
      $$->node[7] = $8 ;
      if( $8 ) $8->parent = $$ ;
      $$->node[8] = $9 ;
      if( $9 ) $9->parent = $$ ;
    }
  }
  | 
  SV_function automatic_opt function_range_or_type_opt Identifier ';' 
    function_item_list statement 
    SV_endfunction 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 8 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
      $$->node[6] = $7 ;
      if( $7 ) $7->parent = $$ ;
      $$->node[7] = $8 ;
      if( $8 ) $8->parent = $$ ;
    }
  }
  | 
  SV_function automatic_opt function_range_or_type_opt Identifier 
    '(' task_port_decl_list ')' ';' 
    block_item_decls_opt 
    statement 
    SV_endfunction 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 11 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
      $$->node[6] = $7 ;
      if( $7 ) $7->parent = $$ ;
      $$->node[7] = $8 ;
      if( $8 ) $8->parent = $$ ;
      $$->node[8] = $9 ;
      if( $9 ) $9->parent = $$ ;
      $$->node[9] = $10 ;
      if( $10 ) $10->parent = $$ ;
      $$->node[10] = $11 ;
      if( $11 ) $11->parent = $$ ;
    }
  }
  | 
  /*  A.K. generate is not supported  
  | 
  'generate' module_item_list_opt 'endgenerate' 
  | 
  'genvar' list_of_identifiers ';' 
  | 
  SV_for '(' Identifier '=' expression ';' 
    expression ';' 
    Identifier '=' expression ')' 
    generate_block 
  | 
  generate_if 
    generate_block_opt 
    SV_else 
    generate_block 
  | 
  generate_if 
    generate_block_opt less_than_K_else 
  | 
  SV_case '(' expression ')' 
    generate_case_items 
    SV_endcase 
  | 
  'generate' SV_begin module_item_list_opt SV_end 'endgenerate' 
  | 
  'generate' SV_begin ':' Identifier  
  | 
  'specify' 'endspecify' 
  | 
  'specify' specify_item_list 'endspecify' 
  | 
  */ 
  /****************************************************/ 
  /*  A.K. Extension to include assertions            */ 
  /****************************************************/ 
  concurrent_assertion_item  
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  |   
  concurrent_assertion_item_declaration   
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
automatic_opt: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  SV_automatic 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
generate_if: 
  SV_if '(' expression ')'  
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  ; 
 
generate_case_items: 
  generate_case_items generate_case_item 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  generate_case_item 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
generate_case_item: 
  expression_list_proper ':' generate_block_opt 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  SV_default ':' generate_block_opt 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
 
module_item_list: 
  module_item_list module_item 
  {
    SKIP_ON_ERROR ;
    PASS2 {
      systemverilog_node *d1, *d2 ;
      d1 = $1 ;
      d2 = $2 ;  
      if(d1) {
        while(d1->next) d1 = d1->next ;
        d1->next = d2 ;
      }
    }
    $$ = $1 ;
  }
  | 
  module_item 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
module_item_list_opt: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  |   
  module_item_list 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
  /* A generate block is the thing within a generate scheme. It may be 
     a single module item, an anonymous block of module items, or a 
     named module item. In all cases, the meat is in the module items 
     inside, and the processing is done by the module_item rules. We 
     only need to take note here of the scope name, if any. */ 
 
generate_block: 
  module_item 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_begin module_item_list_opt SV_end 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  SV_begin ':' Identifier module_item_list_opt SV_end 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  ; 
 
generate_block_opt:  
  ';' 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  generate_block  
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
 
  /* A net declaration assignment allows the programmer to combine the 
     net declaration and the continuous assignment into a single 
     statement. 
 
     Note that the continuous assignment statement is generated as a 
     side effect, and all I pass up is the name of the l-value. */ 
 
net_decl_assign: 
  Identifier '=' expression 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
    PASS1 {
      $1->nm = findname( $1->name ) ;
      if( $1->nm == NULL ) $1->nm = new_node( $1->name, SV_net_name, 1 ) ;
    }
    PASS2 {
      $1->nm = findname( $1->name ) ;
    } 
  }
  ; 
 
net_decl_assigns: 
  net_decl_assigns ',' net_decl_assign 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  net_decl_assign 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
primitive_type: 
  SV_logic  
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_bool  
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_real  
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
primitive_type_opt: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  primitive_type 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
net_type: 
  SV_wire 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_tri 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_tri1 
  {
    $$ = $1 ;
    if( ise_flag ) {
      $$->name = "wire" ;
    }
  }
  | 
  SV_supply0 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_wand 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_triand 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_tri0 
  {
    $$ = $1 ;
    if( ise_flag ) {
      $$->name = "wire" ;
    }
  }
  | 
  SV_supply1 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_wor 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_trior 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_wone 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_uwire 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
var_type: 
  SV_reg 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
parameter_assign_decl: 
  parameter_assign_list 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  range 
    parameter_assign_list 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  SV_signed range 
    parameter_assign_list 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  SV_integer 
     parameter_assign_list 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  SV_time 
    parameter_assign_list 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  real_or_realtime 
    parameter_assign_list 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  SV_string parameter_assign_list 
  {
    if( ise_flag ) {
      $$ = $2 ;
    }
    else {
      SKIP_ON_ERROR ;
      PASS1_2 {
        $$ = ALLOC_SV_NODE ;
        $$->linenum = debug_line_num ;
        $$->filename = input_file_name ;
        $$->type = 0 ;
        $$->num_node = 2 ;
        $$->node[0] = $1 ;
        if( $1 ) $1->parent = $$ ;
        $$->node[1] = $2 ;
        if( $2 ) $2->parent = $$ ;
      }  
    }
  }
  ; 
 
parameter_assign_list: 
  parameter_assign 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  parameter_assign_list ',' parameter_assign 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
 
parameter_assign: 
  Identifier '=' expression parameter_value_ranges_opt 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
    PASS1 {
      named_node *nd ;
      nd = new_node( $1->name, SV_parameter_name, 1 ) ;
      $$->nm = nd ;
      $$->nm->value = $3 ;
      $$->nm->value_range = $4 ;
    }
    PASS2 {
      named_node *nd ;
      nd = findname( $1->name ) ;
      $$->nm = nd ;
      $$->nm->value = $3 ;
      $$->nm->value_range = $4 ;
    } 
  }
  ; 
 
parameter_value_ranges_opt: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  parameter_value_ranges 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
parameter_value_ranges: 
  parameter_value_ranges parameter_value_range 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  parameter_value_range 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
parameter_value_range: 
  from_exclude '[' value_range_expression ':' value_range_expression ']' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
  | 
  from_exclude '[' value_range_expression ':' value_range_expression ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
  | 
  from_exclude '(' value_range_expression ':' value_range_expression ']' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
  | 
  from_exclude '(' value_range_expression ':' value_range_expression ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
  | 
  SV_exclude expression 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  ; 
 
value_range_expression: 
  expression  
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  |  
  SV_inf  
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  |  
  '+' SV_inf  
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  |  
  '-' SV_inf  
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  ; 
 
from_exclude:  
  SV_from  
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_exclude  
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
  /* Localparam assignments and assignment lists are broken into 
     separate BNF so that I can call slightly different parameter 
     handling code. They parse the same as parameters, they just 
     behave differently when someone tries to override them. */ 
 
localparam_assign: 
  Identifier '=' expression 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
    PASS1 {
      named_node *nd ;
      nd = new_node( $1->name, SV_parameter_name, 1 ) ;
      $$->nm = nd ;
      $$->nm->value = $3 ;
    }
    PASS2 {
      named_node *nd ;
      nd = findname( $1->name ) ;
      $$->nm = nd ;
      $$->nm->value = $3 ;
    }   
  }
  ; 
 
localparam_assign_decl: 
  localparam_assign_list 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
   range 
    localparam_assign_list 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  SV_signed range 
    localparam_assign_list 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  SV_integer 
    localparam_assign_list 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
   SV_time 
    localparam_assign_list 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  real_or_realtime 
    localparam_assign_list 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  ; 
 
localparam_assign_list: 
  localparam_assign 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  localparam_assign_list ',' localparam_assign 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
 
  /* The parameters of a module instance can be overridden by writing 
     a list of expressions in a syntax much like a delay list. (The 
     difference being the list can have any length.) The pform that 
     attaches the expression list to the module checks that the 
     expressions are constant. 
 
     Although the BNF in IEEE1364-1995 implies that parameter value 
     lists must be in parentheses, in practice most compilers will 
     accept simple expressions outside of parentheses if there is only 
     one value, so I'll accept simple numbers here. 
 
     The parameter value by name syntax is OVI enhancement BTF-B06 as 
     approved by WG1364 on 6/28/1998. */ 
parameter_value_opt: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  '#' '(' expression_list_with_nuls ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  | 
  '#' '(' parameter_value_byname_list ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  | 
  '#' Decimal_number 
 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  ; 
 
parameter_value_byname: 
  '.' Identifier '(' expression ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  | 
  '.' Identifier '(' ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  ; 
 
parameter_value_byname_list: 
  parameter_value_byname 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  parameter_value_byname_list ',' parameter_value_byname 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
 
 
port: 
  port_reference 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
  /* 
  | 
  '.' Identifier '(' port_reference ')' 
  | 
  '{' port_reference_list '}' 
  | 
  '.' Identifier '(' '{' port_reference_list '}' ')' 
  ; 
  */ 
   
port_reference: 
  Identifier 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
    PASS1 {
      $$->nm = findname( $$->name ) ;
      if( $$->nm == NULL )
        $$->nm = new_node( $$->name, SV_port_name, 1 ) ;
      else $$->nm->type = SV_port_name ;
    }
    PASS2 {
      $$->nm = findname( $$->name ) ;
      $$->nm->type = SV_port_name ;
      $$->sva_type = SV_port_ref ;
    } 
  }
  | 
  Identifier '[' expression ':' expression ']' 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
    PASS1 {
      $1->nm = findname( $1->name ) ;
      if( $1->nm == NULL ) $1->nm = new_node( $1->name, SV_port_name, 1 ) ;
      else $1->nm->type = SV_port_name ;
    }
    PASS2 {
      $1->nm = findname( $1->name ) ;
      $1->nm->type = SV_port_name ;
      $$->sva_type = SV_port_ref_2 ;
    }
  }
  | 
  Identifier '[' expression ']' 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
    PASS1 {
      $1->nm = findname( $1->name ) ;
      if( $1->nm == NULL ) $1->nm = new_node( $1->name, SV_port_name, 1 ) ;
      else $1->nm->type = SV_port_name ;
    }
    PASS2 {
      $1->nm = findname( $1->name ) ;
      $1->nm->type = SV_port_name ;
      $$->sva_type = SV_port_ref_1 ;
    } 
  }
  ; 
 
/* 
port_reference_list: 
  port_reference 
  | 
  port_reference_list ',' port_reference 
  ; 
*/ 
 
  /* The port_name rule is used with a module is being *instantiated*, 
     and not when it is being declared. See the port rule if you are 
     looking for the ports of a module declaration. */ 
port_name: 
  '.' Identifier '(' expression ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  | 
  '.' Identifier '(' ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  ; 
 
port_name_list: 
  port_name_list ',' port_name 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  port_name 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
port_type: 
  SV_input  
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_output 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_inout 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
range: 
 '[' expression ':' expression ']' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  ; 
 
range_opt: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  |   
  range 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
dimensions_opt: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  dimensions  
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
dimensions: 
  '[' expression ':' expression ']' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  | 
  dimensions '[' expression ':' expression ']' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
  ; 
 
  /* This is used to express the return type of a function. */ 
function_range_or_type_opt: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  range 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_signed range 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  SV_integer 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_real 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_realtime 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_time 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
  /* The register_variable rule is matched only when I am parsing 
     variables in a "reg" definition. I therefore know that I am 
     creating registers and I do not need to let the containing rule 
     handle it. The register variable list simply packs them together 
     so that bit ranges can be assigned. */ 
register_variable: 
  Identifier dimensions_opt 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  Identifier '=' expression 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
 
register_variable_list: 
  register_variable 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  register_variable_list ',' register_variable 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
 
real_variable: 
  Identifier dimensions_opt 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  Identifier '=' expression 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
 
real_variable_list: 
  real_variable 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  real_variable_list ',' real_variable 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
 
net_variable: 
  Identifier dimensions_opt 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
    PASS1 {
      $1->nm = findname( $1->name ) ;
      if( $1->nm == NULL ) $1->nm = new_node( $1->name, SV_net_name, 1 ) ;
    }
    PASS2 {
      $1->nm = findname( $1->name ) ;
    } 
  }
  ; 
 
net_variable_list: 
  net_variable 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  net_variable_list ',' net_variable 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
 
specify_item: 
  SV_specparam specparam_list ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  specify_simple_path_decl ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  specify_edge_path_decl ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  SV_if '(' expression ')' specify_simple_path_decl ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
  | 
  SV_if '(' expression ')' specify_edge_path_decl ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
  | 
  SV_ifnone specify_simple_path_decl ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  SV_ifnone specify_edge_path_decl ';' 
 
  /* 
  | 
  K_Sfullskew '(' spec_reference_event ',' spec_reference_event 
	  ',' delay_value ',' delay_value spec_notifier_opt ')' ';' 
  | 
  K_Shold '(' spec_reference_event ',' spec_reference_event 
	  ',' delay_value spec_notifier_opt ')' ';' 
  | 
  K_Snochange '(' spec_reference_event ',' spec_reference_event 
	  ',' delay_value ',' delay_value spec_notifier_opt ')' ';' 
  | 
  K_Speriod '(' spec_reference_event ',' delay_value 
	  spec_notifier_opt ')' ';' 
  | 
  K_Srecovery '(' spec_reference_event ',' spec_reference_event 
	  ',' delay_value spec_notifier_opt ')' ';' 
  | 
  K_Srecrem '(' spec_reference_event ',' spec_reference_event 
	  ',' delay_value ',' delay_value spec_notifier_opt ')' ';' 
  | 
  K_Sremoval '(' spec_reference_event ',' spec_reference_event 
	  ',' delay_value spec_notifier_opt ')' ';' 
  | 
  K_Ssetup '(' spec_reference_event ',' spec_reference_event 
	  ',' delay_value spec_notifier_opt ')' ';' 
  | 
  K_Ssetuphold '(' spec_reference_event ',' spec_reference_event 
	  ',' delay_value ',' delay_value spec_notifier_opt ')' ';' 
  | 
  K_Sskew '(' spec_reference_event ',' spec_reference_event 
	  ',' delay_value spec_notifier_opt ')' ';' 
  | 
  K_Stimeskew '(' spec_reference_event ',' spec_reference_event 
	  ',' delay_value spec_notifier_opt ')' ';' 
  | 
  K_Swidth '(' spec_reference_event ',' delay_value ',' expression 
	  spec_notifier_opt ')' ';' 
  | 
  K_Swidth '(' spec_reference_event ',' delay_value ')' ';' 
  */ 
 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  SV_pulsestyle_onevent specify_path_identifiers ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  SV_pulsestyle_ondetect specify_path_identifiers ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  SV_showcancelled specify_path_identifiers ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  SV_noshowcancelled specify_path_identifiers ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
 
specify_item_list: 
  specify_item 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  specify_item_list specify_item 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  ; 
 
specify_edge_path_decl: 
  specify_edge_path '=' '(' delay_value_list ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  | 
  specify_edge_path '=' delay_value_simple 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
 
edge_operator: 
  SV_posedge  
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_negedge 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
specify_edge_path: 
  '('  specify_path_identifiers spec_polarity 
    EQ_GT '(' specify_path_identifiers polarity_operator expression ')' ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 10 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
      $$->node[6] = $7 ;
      if( $7 ) $7->parent = $$ ;
      $$->node[7] = $8 ;
      if( $8 ) $8->parent = $$ ;
      $$->node[8] = $9 ;
      if( $9 ) $9->parent = $$ ;
      $$->node[9] = $10 ;
      if( $10 ) $10->parent = $$ ;
    }
  }
  | 
  '(' edge_operator specify_path_identifiers spec_polarity 
    EQ_GT '(' specify_path_identifiers polarity_operator expression ')' ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 11 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
      $$->node[6] = $7 ;
      if( $7 ) $7->parent = $$ ;
      $$->node[7] = $8 ;
      if( $8 ) $8->parent = $$ ;
      $$->node[8] = $9 ;
      if( $9 ) $9->parent = $$ ;
      $$->node[9] = $10 ;
      if( $10 ) $10->parent = $$ ;
      $$->node[10] = $11 ;
      if( $11 ) $11->parent = $$ ;
    }
  }
  | 
  '('  specify_path_identifiers spec_polarity 
    STAR_GT  '(' specify_path_identifiers polarity_operator expression ')' ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 10 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
      $$->node[6] = $7 ;
      if( $7 ) $7->parent = $$ ;
      $$->node[7] = $8 ;
      if( $8 ) $8->parent = $$ ;
      $$->node[8] = $9 ;
      if( $9 ) $9->parent = $$ ;
      $$->node[9] = $10 ;
      if( $10 ) $10->parent = $$ ;
    }
  }
  | 
  '(' edge_operator specify_path_identifiers spec_polarity 
    STAR_GT '(' specify_path_identifiers polarity_operator expression ')' ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 11 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
      $$->node[6] = $7 ;
      if( $7 ) $7->parent = $$ ;
      $$->node[7] = $8 ;
      if( $8 ) $8->parent = $$ ;
      $$->node[8] = $9 ;
      if( $9 ) $9->parent = $$ ;
      $$->node[9] = $10 ;
      if( $10 ) $10->parent = $$ ;
      $$->node[10] = $11 ;
      if( $11 ) $11->parent = $$ ;
    }
  }
  ; 
 
polarity_operator: 
  PLS_CLN 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  MNS_CLN 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  ':' 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
specify_simple_path_decl: 
  specify_simple_path '=' '(' delay_value_list ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  | 
  specify_simple_path '=' delay_value_simple 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
 
specify_simple_path: 
  '(' specify_path_identifiers spec_polarity 
      EQ_GT specify_path_identifiers ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
  | 
  '(' specify_path_identifiers spec_polarity 
      STAR_GT specify_path_identifiers ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
  ; 
 
specify_path_identifiers: 
  Identifier 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  Identifier '[' expr_primary ']' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  | 
  specify_path_identifiers ',' Identifier 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  specify_path_identifiers ',' Identifier '[' expr_primary ']' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
  ; 
 
specparam: 
  Identifier '=' expression 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  Identifier '=' expression ':' expression ':' expression 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 7 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
      $$->node[6] = $7 ;
      if( $7 ) $7->parent = $$ ;
    }
  }
  | 
  ps_identifier '=' expression 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  ps_identifier '=' '(' expression ',' expression ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 7 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
      $$->node[6] = $7 ;
      if( $7 ) $7->parent = $$ ;
    }
  }
  ; 
 
specparam_list: 
  specparam 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  specparam_list ',' specparam 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
 
spec_polarity: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  '+'   
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  '-'   
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
spec_reference_event: 
  SV_posedge expression 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  SV_negedge expression 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  SV_posedge expr_primary TRPL_AND expression 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  | 
  SV_negedge expr_primary TRPL_AND expression 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  | 
 
  /* 
  'edge' '[' edge_descriptor_list ']' expr_primary 
  | 
  'edge' '[' edge_descriptor_list ']' expr_primary TRPL_AND expression 
  | 
  */ 
 
  expr_primary TRPL_AND expression 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  expr_primary 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
  /* The edge_descriptor is detected by the lexor as the various 
     2-letter edge sequences that are supported here. For now, we 
     don't care what they are, because we do not yet support specify 
     edge events. */ 
/* 
edge_descriptor_list: 
  edge_descriptor_list ',' K_edge_descriptor 
  | 
  K_edge_descriptor 
  ; 
*/ 
 
spec_notifier_opt: 
  /* empty */ 
  {
    $$ = NULL ;
  }
 | 
  spec_notifier 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
 ; 
 
spec_notifier: 
  ',' 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  ','  hierarchy_identifier 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  spec_notifier ',' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  spec_notifier ',' hierarchy_identifier 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  /* How do we match this path? */ 
  Identifier 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
statement: 
  SV_assign lpvalue '=' expression ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  | 
  SV_deassign lpvalue ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  /* Force and release statements are similar to assignments, 
     syntactically, but they will be elaborated differently. */ 
  SV_force lpvalue '=' expression ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  | 
  SV_release lpvalue ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  SV_begin statement_list SV_end 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  SV_begin ':' Identifier 
    block_item_decls_opt 
    statement_list SV_end 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
  | 
  SV_begin SV_end 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  SV_begin ':' Identifier SV_end 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  | 
  SV_fork ':' Identifier 
     block_item_decls_opt 
    statement_list join_keyword 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
  | 
  SV_fork join_keyword 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  SV_fork ':' Identifier join_keyword 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  | 
  SV_disable hierarchy_identifier ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  ARROW hierarchy_identifier ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  SV_forever statement 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  SV_fork statement_list join_keyword 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  SV_repeat '(' expression ')' statement 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  | 
  SV_case '(' expression ')' case_items SV_endcase 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
  | 
  SV_casex '(' expression ')' case_items SV_endcase 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
  | 
  SV_casez '(' expression ')' case_items SV_endcase 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
  | 
  SV_if '(' expression ')' statement_or_null opt_else_statement 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
  | 
  SV_for '(' lpvalue '=' expression ';' expression ';' 
    lpvalue '=' expression ')' statement 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 13 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
      $$->node[6] = $7 ;
      if( $7 ) $7->parent = $$ ;
      $$->node[7] = $8 ;
      if( $8 ) $8->parent = $$ ;
      $$->node[8] = $9 ;
      if( $9 ) $9->parent = $$ ;
      $$->node[9] = $10 ;
      if( $10 ) $10->parent = $$ ;
      $$->node[10] = $11 ;
      if( $11 ) $11->parent = $$ ;
      $$->node[11] = $12 ;
      if( $12 ) $12->parent = $$ ;
      $$->node[12] = $13 ;
      if( $13 ) $13->parent = $$ ;
    }
  }
  | 
  SV_while '(' expression ')' statement 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  | 

  delay1 statement_or_null 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  event_control attribute_list_opt statement_or_null 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  '@' '*' attribute_list_opt statement_or_null 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  | 
  '@' '(' '*' ')' attribute_list_opt statement_or_null 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
  | 
  lpvalue '=' expression ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  | 
  lpvalue LE expression ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  | 
  lpvalue '=' delay1 expression ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  | 
  lpvalue LE delay1 expression ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  | 
  lpvalue '=' event_control expression ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  | 
  lpvalue '=' SV_repeat '(' expression ')' event_control expression ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 9 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
      $$->node[6] = $7 ;
      if( $7 ) $7->parent = $$ ;
      $$->node[7] = $8 ;
      if( $8 ) $8->parent = $$ ;
      $$->node[8] = $9 ;
      if( $9 ) $9->parent = $$ ;
    }
  }
  | 
  lpvalue LE event_control expression ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  | 
  lpvalue LE SV_repeat '(' expression ')' event_control expression ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 9 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
      $$->node[6] = $7 ;
      if( $7 ) $7->parent = $$ ;
      $$->node[7] = $8 ;
      if( $8 ) $8->parent = $$ ;
      $$->node[8] = $9 ;
      if( $9 ) $9->parent = $$ ;
    }
  }
  | 
  SV_wait '(' expression ')' statement_or_null 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  | 
  Sys_identifier '(' expression_list_with_nuls ')' ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  | 
  Sys_identifier ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  hierarchy_identifier '(' expression_list_proper ')' ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  | 
  /* NOTE: The standard doesn't really support an empty argument list 
     between parentheses, but it seems natural, and people commonly 
     want it. So accept it explicitly. */ 
  hierarchy_identifier '(' ')' ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  | 
  hierarchy_identifier ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  expect_property_statement 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
opt_else_statement: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  SV_else statement_or_null 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  ; 
   
join_keyword: 
  SV_join 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_join_any 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_join_none 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
statement_list: 
  statement_list statement 
  {
    SKIP_ON_ERROR ;
    PASS2 {
      systemverilog_node *d1, *d2 ;
      d1 = $1 ;
      d2 = $2 ;  
      if(d1) {
        while(d1->next) d1 = d1->next ;
        d1->next = d2 ;
      }
    }
    $$ = $1 ;
  }
  | 
  statement 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
statement_or_null: 
  statement 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
 ';' 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
/* 
analog_statement: 
  branch_probe_expression '<+' expression ';' 
  ; 
*/ 
  /* Task items are, other than the statement, task port items and 
     other block items. */ 
task_item: 
  block_item_decl 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  task_port_item  
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
reg_opt: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  SV_reg  
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
task_port_item: 
  SV_input reg_opt signed_opt range_opt list_of_identifiers ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
  | 
  SV_output reg_opt signed_opt range_opt list_of_identifiers ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
  | 
  SV_inout reg_opt signed_opt range_opt list_of_identifiers ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
  | 
  /* When the port is an integer, infer a signed vector of the integer 
     shape. Generate a range ([31:0]) to make it work. */ 
  SV_input SV_integer list_of_identifiers ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  | 
  SV_output SV_integer list_of_identifiers ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  | 
  SV_inout SV_integer list_of_identifiers ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  | 
  /* Ports can be time with a width of [63:0] (unsigned). */ 
  SV_input SV_time list_of_identifiers ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  | 
  SV_output SV_time list_of_identifiers ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  | 
  SV_inout SV_time list_of_identifiers ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  | 
  /* Ports can be real or realtime. */ 
  SV_input real_or_realtime list_of_identifiers ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  | 
  SV_output real_or_realtime list_of_identifiers ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  | 
  SV_inout real_or_realtime list_of_identifiers ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  ; 
 
task_item_list: 
  task_item_list task_item 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  task_item 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
task_item_list_opt: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  task_item_list 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
task_port_decl: 
  SV_input reg_opt signed_opt range_opt Identifier 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  | 
  SV_output reg_opt signed_opt range_opt Identifier 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  | 
  SV_inout reg_opt signed_opt range_opt Identifier 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  | 
  /* Ports can be integer with a width of [31:0]. */ 
  SV_input SV_integer Identifier 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  SV_output SV_integer Identifier 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  SV_inout SV_integer Identifier 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  |   
  /* Ports can be time with a width of [63:0] (unsigned). */ 
  SV_input SV_time Identifier 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  SV_output SV_time Identifier 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  SV_inout SV_time Identifier 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  /* Ports can be real or realtime. */ 
  SV_input real_or_realtime Identifier 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  SV_output real_or_realtime Identifier 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  SV_inout real_or_realtime Identifier 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
 
task_port_decl_list: 
  task_port_decl_list ',' task_port_decl 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  task_port_decl 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  task_port_decl_list ',' Identifier 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  task_port_decl_list ',' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  task_port_decl_list ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  ; 
 
udp_body: 
  SV_table  udp_entry_list SV_endtable  
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
 
udp_entry_list: 
  udp_comb_entry_list 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  udp_sequ_entry_list 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
udp_comb_entry: 
  udp_input_list ':' udp_output_sym ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  ; 
 
udp_comb_entry_list: 
  udp_comb_entry 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  udp_comb_entry_list udp_comb_entry 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  ; 
 
udp_sequ_entry_list: 
  udp_sequ_entry 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  udp_sequ_entry_list udp_sequ_entry 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  ; 
 
udp_sequ_entry: 
  udp_input_list ':' udp_input_sym ':' udp_output_sym ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
  ; 
 
udp_initial: 
  SV_initial Identifier '=' number ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  ; 
 
udp_init_opt: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  udp_initial 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
udp_input_list: 
  udp_input_sym 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  udp_input_list udp_input_sym 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  ; 
 
udp_input_sym: 
 SV_0  
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_1 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_x 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  '?' 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_b 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  '*' 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  '%' 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_f 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_F 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_l 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_h 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_B 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_r  
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_R 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_M 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_n 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_N 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_p 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_P 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_Q 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_q 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV__ 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  '+'  
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
udp_output_sym: 
  SV_0  
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_1  
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_x 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  '-' 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
  /* Port declarations create wires for the inputs and the output. The 
     makes for these ports are scoped within the UDP, so there is no 
     hierarchy involved. */ 
udp_port_decl: 
  SV_input list_of_identifiers ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  SV_output Identifier ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  SV_reg Identifier ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  SV_reg SV_output Identifier ';' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  ; 
 
udp_port_decls: 
  udp_port_decl 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  udp_port_decls udp_port_decl 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  ; 
 
udp_port_list: 
  Identifier 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  udp_port_list ',' Identifier 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
 
udp_reg_opt: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  SV_reg  
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
udp_initial_expr_opt: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  '=' expression 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  ; 
 
udp_input_declaration_list: 
  SV_input Identifier 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  udp_input_declaration_list ',' SV_input Identifier 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  ; 
 
udp_primitive: 
        /* This is the syntax for primitives that uses the IEEE1364-1995 
	   format. The ports are simply names in the port list, and the 
	   declarations are in the body. */ 
  SV_primitive Identifier '(' udp_port_list ')' ';' 
    udp_port_decls 
    udp_init_opt 
    udp_body 
    SV_endprimitive 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 10 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
      $$->node[6] = $7 ;
      if( $7 ) $7->parent = $$ ;
      $$->node[7] = $8 ;
      if( $8 ) $8->parent = $$ ;
      $$->node[8] = $9 ;
      if( $9 ) $9->parent = $$ ;
      $$->node[9] = $10 ;
      if( $10 ) $10->parent = $$ ;
    }
  }
  | 
    /* This is the syntax for IEEE1364-2001 format definitions. The port 
     names and declarations are all in the parameter list. */ 
  SV_primitive Identifier 
    '(' SV_output udp_reg_opt Identifier udp_initial_expr_opt ',' 
      udp_input_declaration_list ')' ';' 
      udp_body 
    SV_endprimitive 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 13 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
      $$->node[6] = $7 ;
      if( $7 ) $7->parent = $$ ;
      $$->node[7] = $8 ;
      if( $8 ) $8->parent = $$ ;
      $$->node[8] = $9 ;
      if( $9 ) $9->parent = $$ ;
      $$->node[9] = $10 ;
      if( $10 ) $10->parent = $$ ;
      $$->node[10] = $11 ;
      if( $11 ) $11->parent = $$ ;
      $$->node[11] = $12 ;
      if( $12 ) $12->parent = $$ ;
      $$->node[12] = $13 ;
      if( $13 ) $13->parent = $$ ;
    }
  }
  ; 
 
 
 
 /****************************************************/ 
 /*  A.K. Extension to include assertions            */ 
 /****************************************************/ 
concurrent_assertion_item_declaration: 
  property_declaration 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  sequence_declaration 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
property_declaration: 
  SV_property  
    Identifier  
  {
    parsing_assertion = 1 ;
    PASS1 {
      $2->nm = new_node( $2->name, SV_property_name, 1 ) ;
      enter_scope( $2->nm ) ;
    }
    PASS2 {
      $2->nm = findname( $2->name ) ;
      enter_scope( $2->nm ) ;
    }
    $<sv_node>$ = NULL ;
  }
    opt_pars_list_of_formals  
    ';' 
    opt_assertion_variable_declarations  
    property_spec  
    ';' 
    SV_endproperty   
    opt_end_identifier 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 10 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
      $$->node[6] = $7 ;
      if( $7 ) $7->parent = $$ ;
      $$->node[7] = $8 ;
      if( $8 ) $8->parent = $$ ;
      $$->node[8] = $9 ;
      if( $9 ) $9->parent = $$ ;
      $$->node[9] = $10 ;
      if( $10 ) $10->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_property_dcl ;
      $2->nm->value = $$ ;
      exit_scope() ;
    }
    parsing_assertion = 0 ;
  }
  | 
  SV_property  
    Property_Name  
  {
    parsing_assertion = 1 ;
    PASS1 {
      $2->nm = new_node( $2->name, SV_property_name, 1 ) ;
      enter_scope( $2->nm ) ;
    }
    PASS2 {
      $2->nm = findname( $2->name ) ;
      enter_scope( $2->nm ) ;
    }
    $<sv_node>$ = NULL ;
  }
    opt_pars_list_of_formals  
    ';' 
    opt_assertion_variable_declarations  
    property_spec  
    ';' 
    SV_endproperty   
    opt_end_identifier 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 10 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
      $$->node[6] = $7 ;
      if( $7 ) $7->parent = $$ ;
      $$->node[7] = $8 ;
      if( $8 ) $8->parent = $$ ;
      $$->node[8] = $9 ;
      if( $9 ) $9->parent = $$ ;
      $$->node[9] = $10 ;
      if( $10 ) $10->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_property_dcl ;
      $2->nm->value = $$ ;
      exit_scope() ;
    }
    parsing_assertion = 0 ;
  }
  ; 
 
opt_pars_list_of_formals: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  '(' opt_list_of_formals ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
 
opt_list_of_formals: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  list_of_formals 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
property_spec: 
  opt_clocking_event opt_disable_iff_block property_expr 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
 
property_expr: 
  Property_Name opt_pars_actual_arg_list  
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_property_instance ;
    }
    PASS2 {
      $1->nm = findname( $1->name ) ;
      if( $1->nm == NULL ) {
        // burf error
        fprintf( stderr, "Property Instance %s not defined.\n", $1->name ) ;
      }
      // create actual argument list and keep it
      if( $2 && $2->node[1] ) {
        systemverilog_node *arg = $2->node[1] ;
        if( arg->sva_type == SV_formal_arg || 
            arg->sva_type ==  SV_formal_arg_list 
        ) {
          while( arg ) {
            if( arg->sva_type == SV_formal_arg ) {
              arg->node[1]->nm = findname_in_scope( $1->nm, arg->node[1]->name ) ;
              if( !arg->node[1]->nm ) {
                // burf error
                fprintf(
                  stderr, "Formal arg %s not found in Sequence %s.\n",
                  arg->node[1]->name, $1->name 
                ) ;
              }
              arg = NULL ;
            }
            else {
              // arg->sva_type ==  SV_formal_arg_list
      	    arg->node[0]->node[1]->nm 
                = findname_in_scope( $1->nm, arg->node[0]->node[1]->name ) ;
              if( !arg->node[0]->node[1]->nm ) {
                // burf error
                fprintf(
                  stderr, "Formal arg %s not found in Sequence %s.\n",
                  arg->node[0]->node[1]->name, $1->name 
                ) ;
              }
              arg = arg->node[2] ;          
            }
          }
        }
      }
    }  
  }
  |  
  '(' property_expr ')'  
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_par_property_par ;
    }
  }
  | 
  SV_not property_expr  
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_not_property ;
    }
  }
  |  
  property_expr SV_or property_expr  
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_prop_or_prop ;
    }
  }
  | 
  property_expr SV_and property_expr  
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_prop_and_prop ;
    }
  }
  |  
  sequence_expr BAR_ARROW property_expr 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_seq_ovi_prop ;
    }
  }
  |  
  sequence_expr BAR_FATARROW property_expr  
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_seq_novi_prop ;
    }
  }
  |  
  SV_if '(' expression ')' property_expr opt_else_property_expr 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 6 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_if_else_prop ;
    }
  }
  |  
  /* avoid conflict 
  clocking_event property_expr 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_clk_property ;
    }
  }
  | 
  */ 
  sequence_expr 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
opt_else_property_expr: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  SV_else property_expr  
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  ; 
 
/* sequence definition */ 
 
sequence_declaration: 
  SV_sequence  
    Identifier  
  {
    parsing_assertion = 1 ;
    PASS1 {
      $2->nm = new_node( $2->name, SV_sequence_name, 1 ) ;
      enter_scope( $2->nm ) ;
    }
    PASS2 {
      $2->nm = findname( $2->name ) ;
      enter_scope( $2->nm ) ;
    }
    $<sv_node>$ = NULL ;
  }
    opt_pars_list_of_formals  
    ';' 
    opt_assertion_variable_declarations  
    sequence_expr  
    ';' 
    SV_endsequence  
    opt_end_identifier 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 10 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
      $$->node[6] = $7 ;
      if( $7 ) $7->parent = $$ ;
      $$->node[7] = $8 ;
      if( $8 ) $8->parent = $$ ;
      $$->node[8] = $9 ;
      if( $9 ) $9->parent = $$ ;
      $$->node[9] = $10 ;
      if( $10 ) $10->parent = $$ ;
    }
  }
    PASS1_2 {
      exit_scope() ;
      $2->nm->value = $$ ;
      $$->sva_type = SV_sequence_dcl ;
    }
    parsing_assertion = 0 ;
  }
  ; 
 
opt_assertion_variable_declarations: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  assertion_variable_declarations 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
assertion_variable_declarations: 
  assertion_variable_declaration 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  assertion_variable_declarations assertion_variable_declaration 
  {
    SKIP_ON_ERROR ;
    PASS2 {
      systemverilog_node *d1, *d2 ;
      d1 = $1 ;
      d2 = $2 ;  
      if(d1) {
        while(d1->next) d1 = d1->next ;
        d1->next = d2 ;
      }
    }
    $$ = $1 ;
  }
  ; 
 
sequence_item: 
  expression 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  expression opt_boolean_abbrev 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_seq_expression_abbrev ;
    }
  }
  | 
  '(' expression opt_coma_sequence_match_items ')'  
    opt_boolean_abbrev 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_seq_par_exp_match_par_abbrev ;
    }
  }
  | 
  sequence_instance opt_sequence_abbrev 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_seq_inst_abbrev ;
    }
  }
  |  
  SV_first_match '(' sequence_expr opt_coma_sequence_match_items ')' 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_seq_first_match ;  
    }
  }
  |  
  expression SV_throughout sequence_expr  
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_seq_exp_throughout_seq ;
    }
  }
  | 
  expression SV_and sequence_expr 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_seq_seq_and_seq ;
    }
  }
  |  
  '(' sequence_expr ')' SV_and sequence_expr 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[1] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[2] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
    PASS1_2 {
      $$->sva_type = SV_seq_seq_and_seq ;
    }
  }
  | 
  expression SV_intersect sequence_expr 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_seq_seq_intersect_seq ;
    }
  }
  | 
  '(' sequence_expr ')' SV_intersect sequence_expr   
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[1] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[2] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
    PASS1_2 {
      $$->sva_type = SV_seq_seq_intersect_seq ;
    }
  }
  | 
  expression SV_or sequence_expr  
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_seq_seq_or_seq ;
    }
  }
  | 
  '(' sequence_expr ')' SV_or sequence_expr 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[1] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[2] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
    PASS1_2 {
      $$->sva_type = SV_seq_seq_or_seq ;
    }
  }
  | 
  expression SV_within sequence_expr 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_seq_seq_within_seq ;
    }
  }
  | 
  '(' sequence_expr ')' SV_within sequence_expr 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[1] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[2] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
    PASS1_2 {
      $$->sva_type = SV_seq_seq_within_seq ;
    }
  }
  | 
  '(' sequence_expr opt_coma_sequence_match_items ')' opt_sequence_abbrev  
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_seq_par_seq_match_par_abbrev ;  
    }
  }
  ; 
   
/* from here */ 
   
sequence_expr: 
  opt_cycle_delay_range sequence_item opt_more_sequence_item 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_sequence_expr ;
    }  
  }
  | 
  '(' sequence_expr ')' 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_par_sequence_expr ;
    }  
  }
  ; 
 
opt_cycle_delay_range: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  cycle_delay_range 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
   
opt_more_sequence_item: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  more_sequence_item 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
more_sequence_item: 
  cycle_delay_range_sequence_item 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  more_sequence_item cycle_delay_range_sequence_item 
  {
    // more_cycle_delay_range_sequence_item
    SKIP_ON_ERROR ;
    $$ = $1 ;
    PASS1_2 {
      systemverilog_node *n, *nn ;
      n = $$ ;
      while( n->next ) n = n->next ;
      n->next = $2 ;
    }
  }
  ; 
 
cycle_delay_range_sequence_item: 
  cycle_delay_range  sequence_expr_item 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_cycle_delay_range_sequence_item ;
    }
  }
  ; 
     
sequence_expr_item: 
  /*  expression_or_dist opt_boolean_abbrev */ 
  expression opt_boolean_abbrev 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_seq_expression_abbrev ;
    }
  }
  |  
  /*  '(' expression_or_dist opt_coma_sequence_match_items ')' */ 
  '(' expression opt_coma_sequence_match_items ')'  
    opt_boolean_abbrev 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_seq_par_exp_match_par_abbrev ;
    }
  }
  | 
  sequence_instance opt_sequence_abbrev 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_seq_inst_abbrev ;
    }
  }
  |  
  '(' sequence_expr opt_coma_sequence_match_items ')' opt_sequence_abbrev  
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_seq_par_seq_match_par_abbrev ;  
    }
  }
  |  
  sequence_expr SV_and sequence_expr 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_seq_seq_and_seq ;
    }
  }
  |  
  sequence_expr SV_intersect sequence_expr 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_seq_seq_intersect_seq ;
    }
  }
  | 
   sequence_expr SV_or sequence_expr  
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_seq_seq_or_seq ;
    }
  }
  |  
  SV_first_match '(' sequence_expr opt_coma_sequence_match_items ')' 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_seq_first_match ;  
    }
  }
  |  
  /*  expression_or_dist SV_throughout sequence_expr  */ 
  expression SV_throughout sequence_expr  
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_seq_exp_throughout_seq ;
    }
  }
  |  
  sequence_expr SV_within sequence_expr  
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_seq_seq_within_seq ;
    }
  }
  |  
  clocking_event sequence_expr 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_seq_clk_seq ;
    }
  }
  ; 
  /* 
  | 
  '(' sequence_item ')' 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_par_seq_item ;
    }  
  }
  ; 
  */ 
   
opt_sequence_abbrev: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  sequence_abbrev 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
opt_boolean_abbrev: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  boolean_abbrev 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
cycle_delay_range_sequence_expr: 
  cycle_delay_range  sequence_expr 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_cycle_delay_range_sequence_expr ;
    }
  }
  ; 
 
opt_coma_sequence_match_items: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  coma_sequence_match_items 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
coma_sequence_match_items: 
  ',' sequence_match_item 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  coma_sequence_match_items ',' sequence_match_item 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
    PASS1_2 {
      systemverilog_node *n, *nn ;
      n = $$ ;
      while( n->next ) n = n->next ;
      nn = ALLOC_SV_NODE ;
      nn->type = 0 ;
      nn->num_node = 2 ;
      nn->node[0] = $2 ;
      nn->node[1] = $3 ;
      n->next = nn ;
    }  
  }
  ; 
 
cycle_delay_range: 
  DBL_SHARP integral_number 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->type = SV_delay_integral_number ;
    }
  }
  | 
  DBL_SHARP Identifier  
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
    PASS2 {
      $2->type = SV_identifier ;
      $2->nm = findname( $2->name ) ;
    }
    PASS1_2 {
      $$->type = SV_delay_Identifier ;
    }
  }
  | 
  DBL_SHARP '(' constant_expression ')' 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->type = SV_delay_par_constant_expression ;
    }
  }
  | 
  DBL_SHARP '[' cycle_delay_const_range_expression ']' 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->type = SV_delay_br_delay_range ;
    }
  }
  ; 
 
/* to here */ 
 
sequence_method_call: 
  sequence_instance '.' Identifier 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
 
sequence_match_item: 
  operator_assignment 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  inc_or_dec_expression  
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
/* subroutine call is not arrowed. 
  |  
  subroutine_call 
  ; 
*/ 
 
sequence_instance: 
  Identifier opt_pars_actual_arg_list 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_sequence_instance ;
    }
    PASS2 {
      $1->nm = findname( $1->name ) ;
      if( $1->nm == NULL ) {
        // burf error
        fprintf( stderr, "Sequence Instance %s not defined.\n", $1->name ) ;
      }
      // create actual argument list and keep it
      if( $2 && $2->node[1] ) {
        systemverilog_node *arg = $2->node[1] ;
        if( arg->sva_type == SV_formal_arg || 
            arg->sva_type ==  SV_formal_arg_list 
        ) {
          while( arg ) {
            if( arg->sva_type == SV_formal_arg ) {
              arg->node[1]->nm = findname_in_scope( $1->nm, arg->node[1]->name ) ;
              if( !arg->node[1]->nm ) {
                // burf error
                fprintf(
                  stderr, "Formal arg %s not found in Sequence %s.\n",
                  arg->node[1]->name, $1->name 
                ) ;
              }
              arg = NULL ;
            }
            else {
              // arg->sva_type ==  SV_formal_arg_list
        	    arg->node[0]->node[1]->nm 
                = findname_in_scope( $1->nm, arg->node[0]->node[1]->name ) ;
              if( !arg->node[0]->node[1]->nm ) {
                // burf error
                fprintf(
                  stderr, "Formal arg %s not found in Sequence %s.\n",
                  arg->node[0]->node[1]->name, $1->name 
                ) ;
              }
              arg = arg->node[2] ;          
            }
          }  // end of while( arg )
        }
      }
    }
  }
  ; 
   
/* above is simplified from 
  ps_identifier opt_pars_actual_arg_list 
  ; 
*/ 
formal_list_item: 
  Identifier opt_assign_actual_arg_expr 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
    PASS1 {
      $1->sva_type = SV_identifier ;
      $1->nm = new_node( $1->name, SV_arg_name, 1 ) ;
    }
    PASS2 {
      $1->sva_type = SV_identifier ;
      $1->nm = findname( $1->name ) ;
      if( $2 ) {
        $1->nm->default_arg_value = $2->node[1] ;
      }
    } 
  }
  ; 
 
opt_assign_actual_arg_expr: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  '=' actual_arg_expr  
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  ; 
 
list_of_formals: 
  formal_list_item 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  list_of_formals ',' formal_list_item 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
 
 
formal_arg_list: 
  formal_arg 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  formal_arg_list ',' formal_arg 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_formal_arg_list ;
    }
    
  }
  ; 
 
formal_arg: 
  '.' Identifier '(' actual_arg_expr ')' 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_formal_arg ;
    }
  }
  ; 
 
actual_arg_expr: 
  expression 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
/* above is simplified from 
  event_expression 
  | 
  '$' 
  ; 
*/ 
 
boolean_abbrev: 
  consecutive_repetition 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  |  
  non_consecutive_repetition 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  |  
  goto_repetition 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
sequence_abbrev: 
  consecutive_repetition 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
consecutive_repetition: 
  '[' '*' const_or_range_expression ']' 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_consecutive_repetition ;
    }
  }
  ;  
 
non_consecutive_repetition: 
  '[' '=' const_or_range_expression ']'  
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_non_consecutive_repetition ;
    }
  }
  ; 
 
goto_repetition: 
  '[' ARROW const_or_range_expression ']' 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_goto_repetition ;
    }
  }
  ; 
 
const_or_range_expression: 
  constant_expression 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  cycle_delay_const_range_expression 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
cycle_delay_const_range_expression: 
  constant_expression ':' constant_expression 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_ranged_bounded_cycle_delay ;
    }
  }
  | 
  constant_expression ':' '$' 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_ranged_unbounded_cycle_delay ;  
    }
  }
  ; 
 
expression_or_dist: 
  expression opt_dist_list 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  ; 
 
opt_dist_list: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  dist_list 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
dist_list: 
  dist_item 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  dist_list ',' dist_item 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
 
dist_item: 
  value_range opt_dist_weight 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  ; 
 
opt_dist_weight: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  C_EQ expression 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  C_DIV expression 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  ; 
 
assertion_variable_declaration: 
  data_type list_of_variable_identifiers ';' 
  {
    systemverilog_node *node ;
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
    node = $2 ;
    while( node ) {
      PASS1 {
        node->node[0]->nm = new_node( node->node[0]->name, SV_localvar_name, 1 ) ;
      }
      PASS2 {
        node->node[0]->nm = findname( node->node[0]->name ) ;
      }
      node = node->next ;
    }
  }
  ; 
 
/* concurrent assertion item definitions */  
 
concurrent_assertion_item: 
  opt_block_id concurrent_assertion_statement  
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
    PASS2 {
      $$->sva_type = SV_concurrent_assertion ;
    }
  }
  ; 
 
opt_block_id: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  Identifier ':' 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
    PASS1 {
      $$->nm = new_node( $1->name, SV_net_name, 1 ) ;
    }
    PASS2 {
      $$->nm = findname( $1->name ) ;
    }   
  }
  ; 
 
concurrent_assertion_statement: 
  assert_property_statement  
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  assume_property_statement 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  |  
  cover_property_statement 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
assert_property_statement: 
  SV_assert  
   SV_property  
  {
    parsing_assertion = 1 ;
    $<sv_node>$ = NULL ;
  }
   '('  
   property_spec 
   ')'  
   action_block 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 7 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
      $$->node[6] = $7 ;
      if( $7 ) $7->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_assert_property ;
    }
    parsing_assertion = 0 ;
  
  }
  ; 
 
assume_property_statement: 
  SV_assume SV_property 
  {
    parsing_assertion = 1 ;
    $<sv_node>$ = NULL ;
  }
   '(' property_spec ')' ';' 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 7 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
      $$->node[6] = $7 ;
      if( $7 ) $7->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_assume_property ;
    }
    parsing_assertion = 0 ;
  
  }
  ; 
 
cover_property_statement: 
  SV_cover SV_property  
  {
    parsing_assertion = 1 ;
    $<sv_node>$ = NULL ;
  }
  '(' property_spec ')' statement_or_null 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 7 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
      $$->node[5] = $6 ;
      if( $6 ) $6->parent = $$ ;
      $$->node[6] = $7 ;
      if( $7 ) $7->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_cover_property ;
    }
    parsing_assertion = 0 ;
  }
  ; 
 
expect_property_statement: 
  SV_expect '(' property_spec ')' action_block 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_expect_property ;
    }
  }
  ; 
 
/*  
property_instance: 
  Identifier opt_pars_actual_arg_list  
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_property_instance ;
    }
    PASS2 {
      $1->nm = findname( $1->name ) ;
      if( $1->nm == NULL ) {
        // burf error
        fprintf( stderr, "Property Instance %s not defined.\n", $1->name ) ;
      }
      // create actual argument list and keep it
      if( $2 && $2->node[1] ) {
        systemverilog_node *arg = $2->node[1] ;
        if( arg->sva_type == SV_formal_arg || 
            arg->sva_type ==  SV_formal_arg_list 
        ) {
          while( arg ) {
            if( arg->sva_type == SV_formal_arg ) {
              arg->node[1]->nm = findname_in_scope( $1->nm, arg->node[1]->name ) ;
              if( !arg->node[1]->nm ) {
                // burf error
                fprintf(
                  stderr, "Formal arg %s not found in Sequence %s.\n",
                  arg->node[1]->name, $1->name 
                ) ;
              }
              arg = NULL ;
            }
            else {
              // arg->sva_type ==  SV_formal_arg_list
      	    arg->node[0]->node[1]->nm 
                = findname_in_scope( $1->nm, arg->node[0]->node[1]->name ) ;
              if( !arg->node[0]->node[1]->nm ) {
                // burf error
                fprintf(
                  stderr, "Formal arg %s not found in Sequence %s.\n",
                  arg->node[0]->node[1]->name, $1->name 
                ) ;
              }
              arg = arg->node[2] ;          
            }
          }
        }
      }
    }  
  }
  ; 
*/ 
 
/* ps_identifier opt_pars_actual_arg_list */ 
 
action_block: 
  statement_or_null 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  opt_statement SV_else statement_or_null 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
   
opt_clocking_event: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  clocking_event 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
opt_disable_iff_block: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
/* A.K. simplified */ 
/*  SV_disable SV_iff '(' expression_or_dist ')' */ 
  SV_disable SV_iff '(' expression ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  ; 
   
clocking_event: 
  '@' Identifier 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  | 
  '@' '(' event_expression ')' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 4 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
    }
  }
  ; 
   
/* 
event_expression: 
  opt_edge_identifier expression opt_iff_expression  
  | 
  sequence_instance opt_iff_expression 
  | 
  event_expression SV_or event_expression  
  |  
  event_expression ',' event_expression 
  ; 
*/ 
 
opt_edge_identifier: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  edge_identifier 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
edge_identifier: 
  SV_posedge 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_negedge 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
opt_iff_expression: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  SV_iff expression  
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  ; 
 
list_of_variable_identifiers: 
  a_variable_identifier 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  list_of_variable_identifiers a_variable_identifier 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      systemverilog_node *d1, *d2 ;
      d1 = $1 ;
      d2 = $2 ;  
      if(d1) {
        while(d1->next) d1 = d1->next ;
        d1->next = d2 ;
        //fprintf( stderr, "D1_next_eq_D2_c! %x %x %x\n", d1, d1->next, d2 ) ;
      }
    }
    $$ = $1 ;
  }
  ; 
 
a_variable_identifier: 
  Identifier variable_dimension 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  ; 
 
variable_dimension: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  sized_or_unsized_dimensions 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
   
sized_or_unsized_dimensions: 
  sized_or_unsized_dimension 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  sized_or_unsized_dimensions sized_or_unsized_dimension 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  ; 
 
sized_or_unsized_dimension: 
  unpacked_dimension 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  unsized_dimension 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
unsized_dimension: 
  '['  ']' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  ; 
   
unpacked_dimension: 
  '[' constant_range ']' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  '[' constant_expression ']' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
   
ps_identifier: 
  opt_package_scope Identifier 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
    PASS2 {
      if( $1 ) {
        // not supported
        fprintf( 
          stderr, "Error: packaged name %s not supported\n", $1->node[0]->name
        ) ;
        exit(1) ;
      } 
      else {
        $$->nm = findname( $2->name ) ;
      }
    }
    PASS1_2 {
      $$->sva_type = SV_identifier ; 
    }
  }
  ; 
   
opt_package_scope: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  package_scope 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
package_scope: 
  Identifier DBL_CLN 
/* 
  | 
  '$unit' DBL_CLN 
*/ 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  ; 
   
opt_statement: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  statement 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
   
constant_expression: 
  constant_primary 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  unary_operator constant_primary 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_unary_constant ;
    }
  }
  | 
  constant_expression binary_operator  constant_expression 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_binary_constant ;
    }
  }
  | 
  constant_expression '?' constant_expression ':' constant_expression 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_selection_constant ;
    }
  } 
  ; 
   
constant_primary: 
  primary_literal 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  ps_identifier 
/* 
  | 
  genvar_identifier 
  | 
  opt_package_scope_or_class_scope enum_identifier 
  | 
  constant_concatenation 
  | 
  constant_multiple_concatenation 
  | 
  constant_function_call 
 
  | 
  '(' constant_mintypmax_expression ')' 
  | 
  constant_cast 
*/ 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
primary_literal: 
  number 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  time_literal 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  Unbased_unsized_literal 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  String_literal 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
unary_operator: 
  '+' 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_unary_plus ;
    }
  }
  | 
  '-' 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_unary_minus ;
    }
  }
  | 
  '!' 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_unary_not ;
    }
  }
  | 
  '~' 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_unary_tilda ;
    }
  }
  | 
  '&' 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_unary_and ;
    }
  }
  | 
  TILDAAND 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_unary_nand ;
    }
  }
  | 
  '|' 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_unary_or ;
    }
  }
  | 
  TILDAOR 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_unary_nor ;
    }
  }
  | 
  '^' 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_unary_xor ;
    }
  }
  | 
  TILDAEOR 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_unary_nxor ;
    }
  }
  | 
  EORTILDA 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_unary_xorn ;
    }
  }
  ; 
 
binary_operator: 
  '+' 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_binary_plus ;
    }
  }
  | 
  '-' 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_binary_minus ;
    }
  }
  | 
  '*' 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_binary_star ;
    }
  }
  | 
  '/' 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_binary_div ;
    }
  }
  | 
  '%' 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_binary_mod ;
    }
  }
  | 
  EQEQ 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_binary_eqeq ;
    }
  }
  | 
  NE 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_binary_neq ;
    }
  }
  | 
  EQEQEQ 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_binary_eqeqeq ;
    }
  }
  | 
  NEQEQ 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_binary_noteqeq ;
    }
  }
  | 
  Q_EQ 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_binary_eqqeq ;
    }
  }
  | 
  Q_NEQ 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_binary_nqeq ;
    }
  }
  | 
  LAND 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_binary_land ;
    }
  }
  | 
  LOR 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_binary_lor ;
    }
  }
  | 
  DOUBLE_STAR 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_binary_starstar ;
    }
  }
  | 
  '<' 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_binary_lt ;
    }
  }
  | 
  LE 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_binary_le ;
    }
  }
  | 
  '>' 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_binary_gt ;
    }
  }
  | 
  GE 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_unary_xorn ;
    }
  }
  | 
  '&' 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_binary_and ;
    }
  }
  | 
  '|' 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_binary_or ;
    }
  }
  | 
  '^' 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_binary_xor ;
    }
  }
  | 
  EORTILDA 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_binary_xorn ;
    }
  }
  | 
  TILDAEOR 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_binary_nxor ;
    }
  }
  | 
  RSHIFT 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_binary_rshift ;
    }
  }
  | 
  LSHIFT 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_binary_lshift ;
    }
  }
  | 
  URSHIFT 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_binary_lrshift ;
    }
  }
  | 
  LTLTLT 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_binary_llshift ;
    }
  }
  ; 
 
inc_or_dec_operator: 
  D_PLUS 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_inc_operator ;
    }
  }
  | 
  D_MINUS 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_dec_operator ;
    }
  }
  ; 
 
time_literal: 
  Unsigned_number time_unit 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  ; 
 
time_unit: 
  SV_s 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_ms 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_us 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_ns 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_ps 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_fs 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_step 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
 
/* limitted type of data are allowed to be used in SVA variable */ 
data_type: 
  integer_vector_type opt_signing opt_packed_dimension 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  | 
  integer_atom_type opt_signing 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  ; 
   
  /* 
  non_integer_type 
  | 
 
  struct_union opt_packed_signing '{' struct_union_menbers '}' 
    opt_packed_dimensions 
  | 
  'enum' opt_enum_base_type '{' enam_name_declarations '}' 
  | 
  SV_string 
  | 
  'chandle' 
  | 
  'virtual' opt_interface_keyword Identifier 
  | 
  opt_class_or_package_scope Identifier opt_packed_dimensions 
  | 
  class_type 
  | 
  SV_event 
  | 
  ps_identifier   
  ; 
  */ 
   
integer_type: 
  integer_vector_type 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  integer_atom_type 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
integer_atom_type: 
  SV_byte 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
    PASS1_2 {
      $$->data_type = SV_byte_type ;
    }
  }
  | 
  SV_shortint 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
    PASS1_2 {
      $$->data_type = SV_shortint_type ;
    }
  }
  | 
  SV_int 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
    PASS1_2 {
      $$->data_type = SV_int_type ;
    }
  }
  | 
  SV_longint 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
    PASS1_2 {
      $$->data_type = SV_longint_type ;
    }
  }
  | 
  SV_integer 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
    PASS1_2 {
      $$->data_type = SV_integer_type ;
    }
  }
  ; 
   
  /* 
  | 
  SV_time 
  ; 
  */ 
   
integer_vector_type: 
  SV_bit 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
    PASS1_2 {
      $$->data_type = SV_bit_type ;
    }
  }
  | 
  SV_logic 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
    PASS1_2 {
      $$->data_type = SV_logic_type ;
    }
  }
  | 
  SV_reg 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
    PASS1_2 {
      $$->data_type = SV_reg_type ;
    }
  }
  ; 
 
non_integer_type: 
  SV_shortreal 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_real 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_realtime 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
opt_signing: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  signing 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
signing: 
  SV_signed 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  SV_unsigned 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
constant_range: 
  constant_expression ':' constant_expression 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
 
/*  
   next is simplified,  
   actually: 
     lpvalue assignment_operator expression 
*/ 
 
operator_assignment: 
  Identifier assignment_operator expression 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
    PASS2 {
      $1->nm = findname( $1->name ) ;
      $$->type = SV_operator_assignment ;
    }
  }
  ; 
 
 
assignment_operator: 
  '=' 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_assign_operator ;
    }
  }
  | 
  PLUS_EQ  
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_func_assign_operator ;
    }
  }
  | 
  MINUS_EQ 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_func_assign_operator ;
    }
  }
  | 
  STAR_EQ 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_func_assign_operator ;
    }
  }
  | 
  SLSH_EQ  
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_func_assign_operator ;
    }
  }
  | 
  MOD_EQ  
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_func_assign_operator ;
    }
  }
  | 
  AND_EQ 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_func_assign_operator ;
    }
  }
  | 
  OR_EQ 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_func_assign_operator ;
    }
  }
  | 
  EOR_EQ 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_func_assign_operator ;
    }
  }
  | 
  LSHIFT_EQ  
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_func_assign_operator ;
    }
  }
  | 
  RSHIFT_EQ 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_func_assign_operator ;
    }
  }
  | 
  ULSHIFT_EQ 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_func_assign_operator ;
    }
  }
  | 
  URSHIFT_EQ 
  {
    $$ = $1 ;
    PASS1_2 {
      $$->sva_type = SV_func_assign_operator ;
    }
  }
  ; 
 
/* 
  next is simplified 
  actually: 
  inc_or_dec_operator lpvalue 
  | 
  lpvalue inc_or_dec_operator 
*/ 
inc_or_dec_expression: 
  inc_or_dec_operator Identifier 
  { 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
    PASS2 {
      $1->nm = findname( $2->name ) ;
      $$->type = SV_inc_or_dec_Identifier ;
    }
  }
  | 
  Identifier inc_or_dec_operator 
  { 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
    PASS2 {
      $1->nm = findname( $1->name ) ;
      $$->type = SV_Identifier_inc_or_dec ;
    }
  }
  ; 
 
opt_end_identifier: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  ':' Identifier 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  ; 
 
value_range: 
  expression 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  '[' expression ':' expression ']' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
  ; 
 
opt_pars_actual_arg_list: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  '(' opt_actual_arg_list ')'  
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
 
opt_actual_arg_list: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  actual_arg_list 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  formal_arg_list 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
actual_arg_list: 
  actual_arg_expr  
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  actual_arg_list ',' actual_arg_expr  
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_actual_arg_list ;
    }
    
  }
  ; 
 
opt_packed_dimensions: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  packed_dimensions 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
 
packed_dimensions: 
  packed_dimension 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  | 
  packed_dimensions packed_dimension 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
  ; 
 
opt_packed_dimension: 
  /* empty */ 
  {
    $$ = NULL ;
  }
  | 
  packed_dimension 
  {
    SKIP_ON_ERROR ;
    $$ = $1 ;
  }
  ; 
   
packed_dimension: 
  '[' constant_range ']' 
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
  ; 
  /* 
  | 
  '['  ']' 
  ; 
  */ 
 
expression: 
  '(' expression ')' 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
    PASS1_2{
      $$->sva_type = SV_par_expression ;
    }  
  }
  | 
  expr_primary 
  {
    $$ = $1 ;
    PASS1_2{
      if( $$->sva_type == SV_no_compile ) $$->sva_type = SV_expression ;
    }
  }
  | 
  unary_operator expr_primary 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 2 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_unary_expression ;
    }
  }
  | 
  expression binary_operator expression 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 3 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_binary_expression ;
    }
  }
  | 
  expression '?' expression ':' expression 
  {
  {
    SKIP_ON_ERROR ;
    PASS1_2 {
      $$ = ALLOC_SV_NODE ;
      $$->linenum = debug_line_num ;
      $$->filename = input_file_name ;
      $$->type = 0 ;
      $$->num_node = 5 ;
      $$->node[0] = $1 ;
      if( $1 ) $1->parent = $$ ;
      $$->node[1] = $2 ;
      if( $2 ) $2->parent = $$ ;
      $$->node[2] = $3 ;
      if( $3 ) $3->parent = $$ ;
      $$->node[3] = $4 ;
      if( $4 ) $4->parent = $$ ;
      $$->node[4] = $5 ;
      if( $5 ) $5->parent = $$ ;
    }
  }
    PASS1_2 {
      $$->sva_type = SV_select_expression ;
    }
    
  }
  ; 
     
   
  
